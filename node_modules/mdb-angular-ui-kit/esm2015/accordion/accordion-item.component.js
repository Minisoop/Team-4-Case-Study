import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { MdbCollapseDirective } from 'mdb-angular-ui-kit/collapse';
import { Subject } from 'rxjs';
import { MDB_ACCORDION_ITEM_BODY } from './accordion-item-content.directive';
import { MDB_ACCORDION_ITEM_HEADER } from './accordion-item-header.directive';
let uniqueHeaderId = 0;
let uniqueId = 0;
export class MdbAccordionItemComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.id = `mdb-accordion-item-${uniqueId++}`;
        this._headerId = `mdb-accordion-item-header-${uniqueHeaderId++}`;
        this._isInitialized = false;
        this._shouldOpenOnInit = false;
        this.itemShow = new EventEmitter();
        this.itemShown = new EventEmitter();
        this.itemHide = new EventEmitter();
        this.itemHidden = new EventEmitter();
        this.accordionItem = true;
        this.show$ = new Subject();
        this._collapsed = true;
        this._addCollapsedClass = true;
    }
    set collapsed(value) {
        if (!this._isInitialized) {
            if (!value) {
                this._shouldOpenOnInit = true;
            }
            return;
        }
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    ngOnInit() {
        this._isInitialized = true;
        if (this._shouldOpenOnInit) {
            this.show();
        }
    }
    toggle() {
        this.collapse.toggle();
    }
    show() {
        this.collapse.show();
        this._cdRef.markForCheck();
    }
    hide() {
        this.collapse.hide();
        this._cdRef.markForCheck();
    }
    onShow() {
        this._addCollapsedClass = false;
        this.itemShow.emit(this);
        this.show$.next(this);
    }
    onHide() {
        this._addCollapsedClass = true;
        this.itemHide.emit(this);
    }
    onShown() {
        this._collapsed = false;
        this.itemShown.emit(this);
    }
    onHidden() {
        this._collapsed = true;
        this.itemHidden.emit(this);
    }
}
MdbAccordionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-accordion-item',
                template: "<h2 class=\"accordion-header\" [id]=\"_headerId\">\n  <button\n    class=\"accordion-button\"\n    type=\"button\"\n    [attr.aria-expanded]=\"!_collapsed\"\n    [attr.aria-controls]=\"id\"\n    [class.collapsed]=\"_addCollapsedClass\"\n    (click)=\"toggle()\"\n  >\n    {{ header }}\n    <ng-template *ngIf=\"_headerTemplate\" [ngTemplateOutlet]=\"_headerTemplate\"></ng-template>\n  </button>\n</h2>\n<div\n  mdbCollapse\n  (collapseShow)=\"onShow()\"\n  (collapseHide)=\"onHide()\"\n  (collapseShow)=\"onShown()\"\n  (collapseHide)=\"onHidden()\"\n  [attr.id]=\"id\"\n  [attr.aria-labelledby]=\"_headerId\"\n>\n  <div class=\"accordion-body\">\n    <ng-template *ngIf=\"_bodyTemplate\" [ngTemplateOutlet]=\"_bodyTemplate\"></ng-template>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
MdbAccordionItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MdbAccordionItemComponent.propDecorators = {
    _headerTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_HEADER, { read: TemplateRef, static: true },] }],
    _bodyTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_BODY, { read: TemplateRef, static: true },] }],
    collapse: [{ type: ViewChild, args: [MdbCollapseDirective, { static: true },] }],
    header: [{ type: Input }],
    collapsed: [{ type: Input }],
    id: [{ type: Input }],
    itemShow: [{ type: Output }],
    itemShown: [{ type: Output }],
    itemHide: [{ type: Output }],
    itemHidden: [{ type: Output }],
    accordionItem: [{ type: HostBinding, args: ['class.accordion-item',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWFuZ3VsYXItdWkta2l0L2FjY29yZGlvbi9hY2NvcmRpb24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFFTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRTlFLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN2QixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFPakIsTUFBTSxPQUFPLHlCQUF5QjtJQXFEcEMsWUFBb0IsTUFBeUI7UUFBekIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUEzQnBDLE9BQUUsR0FBRyxzQkFBc0IsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUVqRCxjQUFTLEdBQUcsNkJBQTZCLGNBQWMsRUFBRSxFQUFFLENBQUM7UUFFcEQsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFDdkIsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBRXhCLGFBQVEsR0FBNEMsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN2RSxjQUFTLEdBQTRDLElBQUksWUFBWSxFQUFFLENBQUM7UUFDeEUsYUFBUSxHQUE0QyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3ZFLGVBQVUsR0FBNEMsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUU5QyxrQkFBYSxHQUFHLElBQUksQ0FBQztRQVUxRCxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQTZCLENBQUM7UUFFakQsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQix1QkFBa0IsR0FBRyxJQUFJLENBQUM7SUFFc0IsQ0FBQztJQTNDakQsSUFDSSxTQUFTLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7YUFDL0I7WUFDRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7SUFnQkQsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTNCLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQVNELE1BQU07UUFDSixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7OztZQTlGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIscXdCQUE4QztnQkFDOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7OztZQXZCQyxpQkFBaUI7Ozs4QkF5QmhCLFlBQVksU0FBQyx5QkFBeUIsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs0QkFHM0UsWUFBWSxTQUFDLHVCQUF1QixFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3VCQUd6RSxTQUFTLFNBQUMsb0JBQW9CLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3FCQUVoRCxLQUFLO3dCQUNMLEtBQUs7aUJBZ0JMLEtBQUs7dUJBT0wsTUFBTTt3QkFDTixNQUFNO3VCQUNOLE1BQU07eUJBQ04sTUFBTTs0QkFFTixXQUFXLFNBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1kYkNvbGxhcHNlRGlyZWN0aXZlIH0gZnJvbSAnbWRiLWFuZ3VsYXItdWkta2l0L2NvbGxhcHNlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1EQl9BQ0NPUkRJT05fSVRFTV9CT0RZIH0gZnJvbSAnLi9hY2NvcmRpb24taXRlbS1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBNREJfQUNDT1JESU9OX0lURU1fSEVBREVSIH0gZnJvbSAnLi9hY2NvcmRpb24taXRlbS1oZWFkZXIuZGlyZWN0aXZlJztcblxubGV0IHVuaXF1ZUhlYWRlcklkID0gMDtcbmxldCB1bmlxdWVJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21kYi1hY2NvcmRpb24taXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY2NvcmRpb24taXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJBY2NvcmRpb25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQENvbnRlbnRDaGlsZChNREJfQUNDT1JESU9OX0lURU1fSEVBREVSLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSlcbiAgX2hlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGQoTURCX0FDQ09SRElPTl9JVEVNX0JPRFksIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KVxuICBfYm9keVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBWaWV3Q2hpbGQoTWRiQ29sbGFwc2VEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pIGNvbGxhcHNlOiBNZGJDb2xsYXBzZURpcmVjdGl2ZTtcblxuICBASW5wdXQoKSBoZWFkZXI6IHN0cmluZztcbiAgQElucHV0KClcbiAgc2V0IGNvbGxhcHNlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICghdGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICB0aGlzLl9zaG91bGRPcGVuT25Jbml0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBpZCA9IGBtZGItYWNjb3JkaW9uLWl0ZW0tJHt1bmlxdWVJZCsrfWA7XG5cbiAgX2hlYWRlcklkID0gYG1kYi1hY2NvcmRpb24taXRlbS1oZWFkZXItJHt1bmlxdWVIZWFkZXJJZCsrfWA7XG5cbiAgcHJpdmF0ZSBfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zaG91bGRPcGVuT25Jbml0ID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpIGl0ZW1TaG93OiBFdmVudEVtaXR0ZXI8TWRiQWNjb3JkaW9uSXRlbUNvbXBvbmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBpdGVtU2hvd246IEV2ZW50RW1pdHRlcjxNZGJBY2NvcmRpb25JdGVtQ29tcG9uZW50PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIGl0ZW1IaWRlOiBFdmVudEVtaXR0ZXI8TWRiQWNjb3JkaW9uSXRlbUNvbXBvbmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBpdGVtSGlkZGVuOiBFdmVudEVtaXR0ZXI8TWRiQWNjb3JkaW9uSXRlbUNvbXBvbmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY2NvcmRpb24taXRlbScpIGFjY29yZGlvbkl0ZW0gPSB0cnVlO1xuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3Nob3VsZE9wZW5PbkluaXQpIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHNob3ckID0gbmV3IFN1YmplY3Q8TWRiQWNjb3JkaW9uSXRlbUNvbXBvbmVudD4oKTtcblxuICBfY29sbGFwc2VkID0gdHJ1ZTtcbiAgX2FkZENvbGxhcHNlZENsYXNzID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgdG9nZ2xlKCk6IHZvaWQge1xuICAgIHRoaXMuY29sbGFwc2UudG9nZ2xlKCk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMuY29sbGFwc2Uuc2hvdygpO1xuICAgIHRoaXMuX2NkUmVmLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgaGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbGxhcHNlLmhpZGUoKTtcbiAgICB0aGlzLl9jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIG9uU2hvdygpOiB2b2lkIHtcbiAgICB0aGlzLl9hZGRDb2xsYXBzZWRDbGFzcyA9IGZhbHNlO1xuICAgIHRoaXMuaXRlbVNob3cuZW1pdCh0aGlzKTtcblxuICAgIHRoaXMuc2hvdyQubmV4dCh0aGlzKTtcbiAgfVxuXG4gIG9uSGlkZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9hZGRDb2xsYXBzZWRDbGFzcyA9IHRydWU7XG4gICAgdGhpcy5pdGVtSGlkZS5lbWl0KHRoaXMpO1xuICB9XG5cbiAgb25TaG93bigpOiB2b2lkIHtcbiAgICB0aGlzLl9jb2xsYXBzZWQgPSBmYWxzZTtcbiAgICB0aGlzLml0ZW1TaG93bi5lbWl0KHRoaXMpO1xuICB9XG5cbiAgb25IaWRkZW4oKTogdm9pZCB7XG4gICAgdGhpcy5fY29sbGFwc2VkID0gdHJ1ZTtcbiAgICB0aGlzLml0ZW1IaWRkZW4uZW1pdCh0aGlzKTtcbiAgfVxufVxuIl19