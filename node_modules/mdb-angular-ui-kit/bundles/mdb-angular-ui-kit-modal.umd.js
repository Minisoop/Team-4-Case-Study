(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/cdk/portal'), require('@angular/core'), require('@angular/cdk/a11y'), require('rxjs/operators'), require('@angular/common'), require('@angular/cdk/overlay')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/modal', ['exports', 'rxjs', '@angular/cdk/portal', '@angular/core', '@angular/cdk/a11y', 'rxjs/operators', '@angular/common', '@angular/cdk/overlay'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].modal = {}), global.rxjs, global.ng.cdk.portal, global.ng.core, global.ng.cdk.a11y, global.rxjs.operators, global.ng.common, global.ng.cdk.overlay));
}(this, (function (exports, rxjs, portal, core, a11y, operators, common, overlay) { 'use strict';

    /* eslint-disable @typescript-eslint/no-inferrable-types */
    var MdbModalConfig = /** @class */ (function () {
        function MdbModalConfig() {
            this.animation = true;
            this.backdrop = true;
            this.ignoreBackdropClick = false;
            this.keyboard = true;
            this.modalClass = '';
            this.containerClass = '';
            this.data = null;
        }
        return MdbModalConfig;
    }());

    var MdbModalRef = /** @class */ (function () {
        function MdbModalRef(_overlayRef, _container) {
            this._overlayRef = _overlayRef;
            this._container = _container;
            this.onClose$ = new rxjs.Subject();
            this.onClose = this.onClose$.asObservable();
        }
        MdbModalRef.prototype.close = function (message) {
            var _this = this;
            this._container._close();
            setTimeout(function () {
                _this._container._restoreScrollbar();
                _this.onClose$.next(message);
                _this.onClose$.complete();
                _this._overlayRef.detach();
                _this._overlayRef.dispose();
            }, this._container.MODAL_TRANSITION);
        };
        return MdbModalRef;
    }());

    var MdbModalContainerComponent = /** @class */ (function () {
        function MdbModalContainerComponent(_document, _elementRef, _renderer, _focusTrapFactory) {
            this._document = _document;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._focusTrapFactory = _focusTrapFactory;
            this._destroy$ = new rxjs.Subject();
            this.backdropClick$ = new rxjs.Subject();
            this.BACKDROP_TRANSITION = 150;
            this.MODAL_TRANSITION = 200;
            this.modal = true;
        }
        Object.defineProperty(MdbModalContainerComponent.prototype, "hasAnimation", {
            get: function () {
                return this._config.animation;
            },
            enumerable: false,
            configurable: true
        });
        MdbModalContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this._updateContainerClass();
            this._renderer.addClass(this._document.body, 'modal-open');
            this._renderer.setStyle(this._document.body, 'padding-right', '15px');
            this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'block');
            this._previouslyFocusedElement = this._document.activeElement;
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
            if (this._config.animation) {
                setTimeout(function () {
                    _this._renderer.addClass(_this._elementRef.nativeElement, 'show');
                    setTimeout(function () {
                        _this._focusTrap.focusInitialElementWhenReady();
                    }, _this.MODAL_TRANSITION);
                }, this.BACKDROP_TRANSITION);
            }
            else {
                this._focusTrap.focusInitialElementWhenReady();
            }
        };
        MdbModalContainerComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this._config.ignoreBackdropClick) {
                rxjs.fromEvent(this._elementRef.nativeElement, 'mousedown')
                    .pipe(operators.filter(function (event) {
                    var target = event.target;
                    var dialog = _this.modalDialog.nativeElement;
                    var notDialog = target !== dialog;
                    var notDialogContent = !dialog.contains(target);
                    return notDialog && notDialogContent;
                }), operators.takeUntil(this._destroy$))
                    .subscribe(function (event) {
                    _this.backdropClick$.next(event);
                });
            }
        };
        MdbModalContainerComponent.prototype.ngOnDestroy = function () {
            this._previouslyFocusedElement.focus();
            this._focusTrap.destroy();
            this._destroy$.next();
            this._destroy$.complete();
        };
        MdbModalContainerComponent.prototype._updateContainerClass = function () {
            var _this = this;
            if (this._config.containerClass === '' ||
                (this._config.containerClass.length && this._config.containerClass.length === 0)) {
                return;
            }
            var containerClasses = this._config.containerClass.split(' ');
            containerClasses.forEach(function (containerClass) {
                _this._renderer.addClass(_this._elementRef.nativeElement, containerClass);
            });
        };
        MdbModalContainerComponent.prototype._close = function () {
            var _this = this;
            if (this._config.animation) {
                this._renderer.removeClass(this._elementRef.nativeElement, 'show');
            }
            // Pause iframe/video when closing modal
            var iframeElements = Array.from(this._elementRef.nativeElement.querySelectorAll('iframe'));
            var videoElements = Array.from(this._elementRef.nativeElement.querySelectorAll('video'));
            iframeElements.forEach(function (iframe) {
                var srcAttribute = iframe.getAttribute('src');
                _this._renderer.setAttribute(iframe, 'src', srcAttribute);
            });
            videoElements.forEach(function (video) {
                video.pause();
            });
        };
        MdbModalContainerComponent.prototype._restoreScrollbar = function () {
            this._renderer.removeClass(this._document.body, 'modal-open');
            this._renderer.removeStyle(this._document.body, 'padding-right');
        };
        MdbModalContainerComponent.prototype.attachComponentPortal = function (portal) {
            return this._portalOutlet.attachComponentPortal(portal);
        };
        MdbModalContainerComponent.prototype.attachTemplatePortal = function (portal) {
            return this._portalOutlet.attachTemplatePortal(portal);
        };
        return MdbModalContainerComponent;
    }());
    MdbModalContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-modal-container',
                    template: "<div #dialog [class]=\"'modal-dialog' + (_config.modalClass ? ' ' + _config.modalClass : '')\">\n  <div class=\"modal-content\">\n    <ng-template cdkPortalOutlet></ng-template>\n  </div>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.Default
                },] }
    ];
    MdbModalContainerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: a11y.ConfigurableFocusTrapFactory }
    ]; };
    MdbModalContainerComponent.propDecorators = {
        _portalOutlet: [{ type: core.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }],
        modalDialog: [{ type: core.ViewChild, args: ['dialog', { static: true },] }],
        modal: [{ type: core.HostBinding, args: ['class.modal',] }],
        hasAnimation: [{ type: core.HostBinding, args: ['class.fade',] }]
    };

    var MdbModalService = /** @class */ (function () {
        function MdbModalService(_document, _overlay, _injector, _cfr) {
            this._document = _document;
            this._overlay = _overlay;
            this._injector = _injector;
            this._cfr = _cfr;
        }
        MdbModalService.prototype.open = function (componentOrTemplateRef, config) {
            var defaultConfig = new MdbModalConfig();
            config = config ? Object.assign(defaultConfig, config) : defaultConfig;
            var overlayRef = this._createOverlay(config);
            var container = this._createContainer(overlayRef, config);
            var modalRef = this._createContent(componentOrTemplateRef, container, overlayRef, config);
            this._registerListeners(modalRef, config, container);
            return modalRef;
        };
        MdbModalService.prototype._createOverlay = function (config) {
            var overlayConfig = this._getOverlayConfig(config);
            return this._overlay.create(overlayConfig);
        };
        MdbModalService.prototype._getOverlayConfig = function (modalConfig) {
            var config = new overlay.OverlayConfig({
                positionStrategy: this._overlay.position().global(),
                scrollStrategy: this._overlay.scrollStrategies.noop(),
                hasBackdrop: modalConfig.backdrop,
                backdropClass: 'mdb-backdrop',
            });
            return config;
        };
        MdbModalService.prototype._createContainer = function (overlayRef, config) {
            var portal$1 = new portal.ComponentPortal(MdbModalContainerComponent, null, this._injector, this._cfr);
            var containerRef = overlayRef.attach(portal$1);
            containerRef.instance._config = config;
            return containerRef.instance;
        };
        MdbModalService.prototype._createContent = function (componentOrTemplate, container, overlayRef, config) {
            var modalRef = new MdbModalRef(overlayRef, container);
            if (componentOrTemplate instanceof core.TemplateRef) {
                container.attachTemplatePortal(new portal.TemplatePortal(componentOrTemplate, null, {
                    $implicit: config.data,
                    modalRef: modalRef,
                }));
            }
            else {
                var injector = this._createInjector(config, modalRef, container);
                var contentRef = container.attachComponentPortal(new portal.ComponentPortal(componentOrTemplate, config.viewContainerRef, injector));
                if (config.data) {
                    Object.assign(contentRef.instance, Object.assign({}, config.data));
                }
            }
            return modalRef;
        };
        MdbModalService.prototype._createInjector = function (config, modalRef, container) {
            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
            // The dialog container should be provided as the dialog container and the dialog's
            // content are created out of the same `ViewContainerRef` and as such, are siblings
            // for injector purposes. To allow the hierarchy that is expected, the dialog
            // container is explicitly provided in the injector.
            var providers = [
                { provide: MdbModalContainerComponent, useValue: container },
                { provide: MdbModalRef, useValue: modalRef },
            ];
            return core.Injector.create({ parent: userInjector || this._injector, providers: providers });
        };
        MdbModalService.prototype._registerListeners = function (modalRef, config, container) {
            container.backdropClick$.pipe(operators.take(1)).subscribe(function () {
                modalRef.close();
            });
            if (config.keyboard) {
                rxjs.fromEvent(container._elementRef.nativeElement, 'keydown')
                    .pipe(operators.filter(function (event) {
                    return event.key === 'Escape';
                }), operators.take(1))
                    .subscribe(function () {
                    modalRef.close();
                });
            }
        };
        return MdbModalService;
    }());
    MdbModalService.decorators = [
        { type: core.Injectable }
    ];
    MdbModalService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: overlay.Overlay },
        { type: core.Injector },
        { type: core.ComponentFactoryResolver }
    ]; };

    var MdbModalModule = /** @class */ (function () {
        function MdbModalModule() {
        }
        return MdbModalModule;
    }());
    MdbModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [overlay.OverlayModule, portal.PortalModule],
                    exports: [MdbModalContainerComponent],
                    declarations: [MdbModalContainerComponent],
                    providers: [MdbModalService],
                    entryComponents: [MdbModalContainerComponent],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbModalConfig = MdbModalConfig;
    exports.MdbModalContainerComponent = MdbModalContainerComponent;
    exports.MdbModalModule = MdbModalModule;
    exports.MdbModalRef = MdbModalRef;
    exports.MdbModalService = MdbModalService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-modal.umd.js.map
