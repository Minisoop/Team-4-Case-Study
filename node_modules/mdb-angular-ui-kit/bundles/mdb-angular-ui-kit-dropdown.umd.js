(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/layout'), require('@angular/cdk/coercion'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/dropdown', ['exports', '@angular/core', '@angular/cdk/overlay', '@angular/cdk/portal', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/layout', '@angular/cdk/coercion', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].dropdown = {}), global.ng.core, global.ng.cdk.overlay, global.ng.cdk.portal, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.layout, global.ng.cdk.coercion, global.ng.common));
}(this, (function (exports, core, overlay, portal, rxjs, operators, animations, layout, coercion, common) { 'use strict';

    var MdbDropdownToggleDirective = /** @class */ (function () {
        function MdbDropdownToggleDirective() {
        }
        return MdbDropdownToggleDirective;
    }());
    MdbDropdownToggleDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[mdbDropdownToggle]',
                    exportAs: 'mdbDropdownToggle',
                },] }
    ];
    MdbDropdownToggleDirective.ctorParameters = function () { return []; };

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbDropdownMenuDirective = /** @class */ (function () {
        function MdbDropdownMenuDirective() {
        }
        return MdbDropdownMenuDirective;
    }());
    MdbDropdownMenuDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbDropdownMenu]',
                    exportAs: 'mdbDropdownMenu',
                },] }
    ];
    MdbDropdownMenuDirective.ctorParameters = function () { return []; };

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbDropdownDirective = /** @class */ (function () {
        function MdbDropdownDirective(_overlay, _overlayPositionBuilder, _elementRef, _vcr, _breakpointObserver, _cdRef) {
            this._overlay = _overlay;
            this._overlayPositionBuilder = _overlayPositionBuilder;
            this._elementRef = _elementRef;
            this._vcr = _vcr;
            this._breakpointObserver = _breakpointObserver;
            this._cdRef = _cdRef;
            this._animation = true;
            this.offset = 0;
            this.closeOnOutsideClick = true;
            this.closeOnItemClick = true;
            this.closeOnEsc = true;
            this.dropdownShow = new core.EventEmitter();
            this.dropdownShown = new core.EventEmitter();
            this.dropdownHide = new core.EventEmitter();
            this.dropdownHidden = new core.EventEmitter();
            this._open = false;
            this._breakpoints = {
                isSm: this._breakpointObserver.isMatched('(min-width: 576px)'),
                isMd: this._breakpointObserver.isMatched('(min-width: 768px)'),
                isLg: this._breakpointObserver.isMatched('(min-width: 992px)'),
                isXl: this._breakpointObserver.isMatched('(min-width: 1200px)'),
                isXxl: this._breakpointObserver.isMatched('(min-width: 1400px)'),
            };
            this._destroy$ = new rxjs.Subject();
            this._animationState = 'hidden';
        }
        Object.defineProperty(MdbDropdownDirective.prototype, "animation", {
            get: function () {
                return this._animation;
            },
            set: function (value) {
                this._animation = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        MdbDropdownDirective.prototype.ngAfterContentInit = function () {
            this._bindDropdownToggleClick();
        };
        MdbDropdownDirective.prototype.ngOnDestroy = function () {
            if (this._overlayRef) {
                this._overlayRef.detach();
                this._overlayRef.dispose();
            }
            this._destroy$.next();
            this._destroy$.complete();
        };
        MdbDropdownDirective.prototype._bindDropdownToggleClick = function () {
            var _this = this;
            rxjs.fromEvent(this._dropdownToggle.nativeElement, 'click')
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () { return _this.toggle(); });
        };
        MdbDropdownDirective.prototype._createOverlayConfig = function () {
            return new overlay.OverlayConfig({
                hasBackdrop: false,
                scrollStrategy: this._overlay.scrollStrategies.reposition(),
                positionStrategy: this._createPositionStrategy(),
            });
        };
        MdbDropdownDirective.prototype._createOverlay = function () {
            this._overlayRef = this._overlay.create(this._createOverlayConfig());
        };
        MdbDropdownDirective.prototype._createPositionStrategy = function () {
            var positionStrategy = this._overlayPositionBuilder
                .flexibleConnectedTo(this._dropdownToggle)
                .withPositions(this._getPosition())
                .withFlexibleDimensions(false);
            return positionStrategy;
        };
        MdbDropdownDirective.prototype._getPosition = function () {
            this._isDropUp = this._elementRef.nativeElement.classList.contains('dropup');
            this._isDropStart = this._elementRef.nativeElement.classList.contains('dropstart');
            this._isDropEnd = this._elementRef.nativeElement.classList.contains('dropend');
            this._isDropdownMenuEnd =
                this._dropdownMenu.nativeElement.classList.contains('dropdown-menu-end');
            this._xPosition = this._isDropdownMenuEnd ? 'end' : 'start';
            var regex = new RegExp(/dropdown-menu-(sm|md|lg|xl|xxl)-(start|end)/, 'g');
            var responsiveClass = this._dropdownMenu.nativeElement.className.match(regex);
            if (responsiveClass) {
                this._subscribeBrakpoints();
                var positionRegex = new RegExp(/start|end/, 'g');
                var breakpointRegex = new RegExp(/(sm|md|lg|xl|xxl)/, 'g');
                var dropdownPosition = positionRegex.exec(responsiveClass)[0];
                var breakpoint = breakpointRegex.exec(responsiveClass)[0];
                switch (true) {
                    case breakpoint === 'xxl' && this._breakpoints.isXxl:
                        this._xPosition = dropdownPosition;
                        break;
                    case breakpoint === 'xl' && this._breakpoints.isXl:
                        this._xPosition = dropdownPosition;
                        break;
                    case breakpoint === 'lg' && this._breakpoints.isLg:
                        this._xPosition = dropdownPosition;
                        break;
                    case breakpoint === 'md' && this._breakpoints.isMd:
                        this._xPosition = dropdownPosition;
                        break;
                    case breakpoint === 'sm' && this._breakpoints.isSm:
                        this._xPosition = dropdownPosition;
                        break;
                    default:
                        break;
                }
            }
            var position;
            var positionDropup = {
                originX: this._xPosition,
                originY: 'top',
                overlayX: this._xPosition,
                overlayY: 'bottom',
                offsetY: -this.offset,
            };
            var positionDropdown = {
                originX: this._xPosition,
                originY: 'bottom',
                overlayX: this._xPosition,
                overlayY: 'top',
                offsetY: this.offset,
            };
            var positionDropstart = {
                originX: 'start',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'top',
                offsetX: this.offset,
            };
            var positionDropend = {
                originX: 'end',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'top',
                offsetX: -this.offset,
            };
            switch (true) {
                case this._isDropEnd:
                    position = [positionDropend, positionDropstart];
                    break;
                case this._isDropStart:
                    position = [positionDropstart, positionDropend];
                    break;
                case this._isDropUp:
                    position = [positionDropup, positionDropdown];
                    break;
                default:
                    position = [positionDropdown, positionDropup];
                    break;
            }
            return position;
        };
        MdbDropdownDirective.prototype._listenToEscKeyup = function (overlayRef) {
            return rxjs.fromEvent(document, 'keyup').pipe(operators.filter(function (event) { return event.key === 'Escape'; }), operators.takeUntil(overlayRef.detachments()));
        };
        MdbDropdownDirective.prototype._listenToClick = function (overlayRef, origin) {
            var _this = this;
            return rxjs.fromEvent(document, 'click').pipe(operators.filter(function (event) {
                var target = event.target;
                var isInsideMenu = _this._dropdownMenu.nativeElement.contains(target);
                var notTogglerIcon = !_this._dropdownToggle.nativeElement.contains(target);
                var notCustomContent = !isInsideMenu || (target.classList && target.classList.contains('dropdown-item'));
                var notOrigin = target !== origin;
                return notOrigin && notTogglerIcon && notCustomContent;
            }), operators.takeUntil(overlayRef.detachments()));
        };
        MdbDropdownDirective.prototype.onAnimationEnd = function (event) {
            if (event.fromState === 'visible' && event.toState === 'hidden') {
                this._overlayRef.detach();
                this._open = false;
                this.dropdownHidden.emit(this);
            }
            if (event.fromState === 'hidden' && event.toState === 'visible') {
                this.dropdownShown.emit(this);
            }
        };
        MdbDropdownDirective.prototype._subscribeBrakpoints = function () {
            var _this = this;
            var brakpoints = [
                '(min-width: 576px)',
                '(min-width: 768px)',
                '(min-width: 992px)',
                '(min-width: 1200px)',
                '(min-width: 1400px)',
            ];
            this._breakpointSubscription = this._breakpointObserver
                .observe(brakpoints)
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (result) {
                Object.keys(_this._breakpoints).forEach(function (key, index) {
                    var brakpointValue = brakpoints[index];
                    var newBreakpoint = result.breakpoints[brakpointValue];
                    var isBreakpointChanged = newBreakpoint !== _this._breakpoints[key];
                    if (!isBreakpointChanged) {
                        return;
                    }
                    _this._breakpoints[key] = newBreakpoint;
                    if (_this._open) {
                        _this._overlayRef.updatePositionStrategy(_this._createPositionStrategy());
                    }
                });
            });
        };
        MdbDropdownDirective.prototype.show = function () {
            var _this = this;
            this._cdRef.markForCheck();
            if (this._open) {
                return;
            }
            if (!this._overlayRef) {
                this._createOverlay();
            }
            this._portal = new portal.TemplatePortal(this._template, this._vcr);
            this.dropdownShow.emit(this);
            this._open = true;
            this._overlayRef.attach(this._portal);
            this._listenToEscKeyup(this._overlayRef).subscribe(function (isEsc) {
                if (isEsc && _this.closeOnEsc) {
                    _this.hide();
                }
            });
            this._listenToClick(this._overlayRef, this._dropdownToggle.nativeElement).subscribe(function (event) {
                var target = event.target;
                var isDropdownItem = target.classList && target.classList.contains('dropdown-item');
                if (_this.closeOnItemClick && isDropdownItem) {
                    _this.hide();
                    return;
                }
                if (_this.closeOnOutsideClick && !isDropdownItem) {
                    _this.hide();
                    return;
                }
            });
            this._animationState = 'visible';
        };
        MdbDropdownDirective.prototype.hide = function () {
            this._cdRef.markForCheck();
            if (!this._open) {
                return;
            }
            this.dropdownHide.emit(this);
            this._animationState = 'hidden';
        };
        MdbDropdownDirective.prototype.toggle = function () {
            this._cdRef.markForCheck();
            if (this._open) {
                this.hide();
            }
            else {
                this.show();
            }
        };
        return MdbDropdownDirective;
    }());
    MdbDropdownDirective.decorators = [
        { type: core.Component, args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[mdbDropdown]',
                    template: "<ng-content></ng-content>\n<ng-content select=\".dropdown-toggle\"></ng-content>\n<ng-template #dropdownTemplate>\n  <div [@fade]=\"_animationState\" (@fade.done)=\"onAnimationEnd($event)\" [@.disabled]=\"!animation\">\n    <ng-content select=\".dropdown-menu\"></ng-content>\n  </div>\n</ng-template>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    animations: [
                        animations.trigger('fade', [
                            animations.state('visible', animations.style({ opacity: 1 })),
                            animations.state('hidden', animations.style({ opacity: 0 })),
                            animations.transition('visible => hidden', animations.animate('150ms linear')),
                            animations.transition('hidden => visible', [animations.style({ opacity: 0 }), animations.animate('150ms linear')]),
                        ]),
                    ]
                },] }
    ];
    MdbDropdownDirective.ctorParameters = function () { return [
        { type: overlay.Overlay },
        { type: overlay.OverlayPositionBuilder },
        { type: core.ElementRef },
        { type: core.ViewContainerRef },
        { type: layout.BreakpointObserver },
        { type: core.ChangeDetectorRef }
    ]; };
    MdbDropdownDirective.propDecorators = {
        _template: [{ type: core.ViewChild, args: ['dropdownTemplate',] }],
        _dropdownToggle: [{ type: core.ContentChild, args: [MdbDropdownToggleDirective, { read: core.ElementRef },] }],
        _dropdownMenu: [{ type: core.ContentChild, args: [MdbDropdownMenuDirective, { read: core.ElementRef },] }],
        animation: [{ type: core.Input }],
        offset: [{ type: core.Input }],
        closeOnOutsideClick: [{ type: core.Input }],
        closeOnItemClick: [{ type: core.Input }],
        closeOnEsc: [{ type: core.Input }],
        dropdownShow: [{ type: core.Output }],
        dropdownShown: [{ type: core.Output }],
        dropdownHide: [{ type: core.Output }],
        dropdownHidden: [{ type: core.Output }]
    };

    var MdbDropdownModule = /** @class */ (function () {
        function MdbDropdownModule() {
        }
        return MdbDropdownModule;
    }());
    MdbDropdownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, overlay.OverlayModule],
                    declarations: [MdbDropdownDirective, MdbDropdownToggleDirective, MdbDropdownMenuDirective],
                    exports: [MdbDropdownDirective, MdbDropdownToggleDirective, MdbDropdownMenuDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbDropdownDirective = MdbDropdownDirective;
    exports.MdbDropdownMenuDirective = MdbDropdownMenuDirective;
    exports.MdbDropdownModule = MdbDropdownModule;
    exports.MdbDropdownToggleDirective = MdbDropdownToggleDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-dropdown.umd.js.map
