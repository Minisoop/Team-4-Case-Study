(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/carousel', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].carousel = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, coercion, core, rxjs, operators, common) { 'use strict';

    var MdbCarouselItemComponent = /** @class */ (function () {
        function MdbCarouselItemComponent(_elementRef) {
            this._elementRef = _elementRef;
            this.interval = null;
            this.carouselItem = true;
            this.active = false;
            this.next = false;
            this.prev = false;
            this.start = false;
            this.end = false;
        }
        Object.defineProperty(MdbCarouselItemComponent.prototype, "host", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        return MdbCarouselItemComponent;
    }());
    MdbCarouselItemComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-carousel-item',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    MdbCarouselItemComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    MdbCarouselItemComponent.propDecorators = {
        interval: [{ type: core.Input }],
        carouselItem: [{ type: core.HostBinding, args: ['class.carousel-item',] }],
        active: [{ type: core.HostBinding, args: ['class.active',] }],
        next: [{ type: core.HostBinding, args: ['class.carousel-item-next',] }],
        prev: [{ type: core.HostBinding, args: ['class.carousel-item-prev',] }],
        start: [{ type: core.HostBinding, args: ['class.carousel-item-start',] }],
        end: [{ type: core.HostBinding, args: ['class.carousel-item-end',] }]
    };

    var Direction;
    (function (Direction) {
        Direction[Direction["UNKNOWN"] = 0] = "UNKNOWN";
        Direction[Direction["NEXT"] = 1] = "NEXT";
        Direction[Direction["PREV"] = 2] = "PREV";
    })(Direction || (Direction = {}));
    var MdbCarouselComponent = /** @class */ (function () {
        function MdbCarouselComponent(_elementRef, _cdRef) {
            this._elementRef = _elementRef;
            this._cdRef = _cdRef;
            this.animation = 'slide';
            this._controls = false;
            this._dark = false;
            this._indicators = false;
            this._ride = true;
            this._interval = 5000;
            this.keyboard = true;
            this.pause = true;
            this.wrap = true;
            this.slide = new core.EventEmitter();
            this.slideChange = new core.EventEmitter();
            this._activeSlide = 0;
            this._isPlaying = false;
            this._isSliding = false;
            this._destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(MdbCarouselComponent.prototype, "items", {
            get: function () {
                return this._items && this._items.toArray();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "controls", {
            get: function () {
                return this._controls;
            },
            set: function (value) {
                this._controls = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "dark", {
            get: function () {
                return this._dark;
            },
            set: function (value) {
                this._dark = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "indicators", {
            get: function () {
                return this._indicators;
            },
            set: function (value) {
                this._indicators = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "ride", {
            get: function () {
                return this._ride;
            },
            set: function (value) {
                this._ride = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "interval", {
            get: function () {
                return this._interval;
            },
            set: function (value) {
                this._interval = value;
                if (this.items) {
                    this._restartInterval();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCarouselComponent.prototype, "activeSlide", {
            get: function () {
                return this._activeSlide;
            },
            set: function (index) {
                if (this.items.length && this._activeSlide !== index) {
                    this._activeSlide = index;
                    this._restartInterval();
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbCarouselComponent.prototype.onMouseEnter = function () {
            if (this.pause && this._isPlaying) {
                this.stop();
            }
        };
        MdbCarouselComponent.prototype.onMouseLeave = function () {
            if (this.pause && !this._isPlaying) {
                this.play();
            }
        };
        MdbCarouselComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            Promise.resolve().then(function () {
                _this._setActiveSlide(_this._activeSlide);
                if (_this.interval > 0 && _this.ride) {
                    _this.play();
                }
                _this._cdRef.markForCheck();
            });
            if (this.keyboard) {
                rxjs.fromEvent(this._elementRef.nativeElement, 'keydown')
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function (event) {
                    if (event.key === 'ArrowRight') {
                        _this.next();
                    }
                    else if (event.key === 'ArrowLeft') {
                        _this.prev();
                    }
                });
            }
        };
        MdbCarouselComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        MdbCarouselComponent.prototype._setActiveSlide = function (index) {
            var currentSlide = this.items[this._activeSlide];
            currentSlide.active = false;
            var newSlide = this.items[index];
            newSlide.active = true;
            this._activeSlide = index;
        };
        MdbCarouselComponent.prototype._restartInterval = function () {
            var _this = this;
            this._resetInterval();
            var activeElement = this.items[this.activeSlide];
            var interval = activeElement.interval ? activeElement.interval : this.interval;
            if (!isNaN(interval) && interval > 0) {
                this._lastInterval = setInterval(function () {
                    var nInterval = +interval;
                    if (_this._isPlaying && !isNaN(nInterval) && nInterval > 0) {
                        _this.next();
                    }
                    else {
                        _this.stop();
                    }
                }, interval);
            }
        };
        MdbCarouselComponent.prototype._resetInterval = function () {
            if (this._lastInterval) {
                clearInterval(this._lastInterval);
                this._lastInterval = null;
            }
        };
        MdbCarouselComponent.prototype.play = function () {
            if (!this._isPlaying) {
                this._isPlaying = true;
                this._restartInterval();
            }
        };
        MdbCarouselComponent.prototype.stop = function () {
            if (this._isPlaying) {
                this._isPlaying = false;
                this._resetInterval();
            }
        };
        MdbCarouselComponent.prototype.to = function (index) {
            if (index > this.items.length - 1 || index < 0) {
                return;
            }
            if (this.activeSlide === index) {
                this.stop();
                this.play();
                return;
            }
            var direction = index > this.activeSlide ? Direction.NEXT : Direction.PREV;
            this._animateSlides(direction, this.activeSlide, index);
            this.activeSlide = index;
        };
        MdbCarouselComponent.prototype.next = function () {
            if (!this._isSliding) {
                this._slide(Direction.NEXT);
            }
        };
        MdbCarouselComponent.prototype.prev = function () {
            if (!this._isSliding) {
                this._slide(Direction.PREV);
            }
        };
        MdbCarouselComponent.prototype._slide = function (direction) {
            var isFirst = this._activeSlide === 0;
            var isLast = this._activeSlide === this.items.length - 1;
            if (!this.wrap) {
                if ((direction === Direction.NEXT && isLast) || (direction === Direction.PREV && isFirst)) {
                    return;
                }
            }
            var newSlideIndex = this._getNewSlideIndex(direction);
            this._animateSlides(direction, this.activeSlide, newSlideIndex);
            this.activeSlide = newSlideIndex;
            this.slide.emit();
        };
        MdbCarouselComponent.prototype._animateSlides = function (direction, currentIndex, nextIndex) {
            var _this = this;
            var currentItem = this.items[currentIndex];
            var nextItem = this.items[nextIndex];
            var currentEl = currentItem.host;
            var nextEl = nextItem.host;
            this._isSliding = true;
            if (this._isPlaying) {
                this.stop();
            }
            if (direction === Direction.NEXT) {
                nextItem.next = true;
                setTimeout(function () {
                    _this._reflow(nextEl);
                    currentItem.start = true;
                    nextItem.start = true;
                    _this._cdRef.markForCheck();
                }, 0);
                var transitionDuration = 600;
                rxjs.fromEvent(currentEl, 'transitionend')
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    nextItem.next = false;
                    nextItem.start = false;
                    nextItem.active = true;
                    currentItem.active = false;
                    currentItem.start = false;
                    currentItem.next = false;
                    _this.slideChange.emit();
                    _this._isSliding = false;
                });
                this._emulateTransitionEnd(currentEl, transitionDuration);
            }
            else if (direction === Direction.PREV) {
                nextItem.prev = true;
                setTimeout(function () {
                    _this._reflow(nextEl);
                    currentItem.end = true;
                    nextItem.end = true;
                    _this._cdRef.markForCheck();
                }, 0);
                var transitionDuration = 600;
                rxjs.fromEvent(currentEl, 'transitionend')
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    nextItem.prev = false;
                    nextItem.end = false;
                    nextItem.active = true;
                    currentItem.active = false;
                    currentItem.end = false;
                    currentItem.prev = false;
                    _this.slideChange.emit();
                    _this._isSliding = false;
                });
                this._emulateTransitionEnd(currentEl, transitionDuration);
            }
            if (!this._isPlaying && this.interval > 0) {
                this.play();
            }
        };
        MdbCarouselComponent.prototype._reflow = function (element) {
            return element.offsetHeight;
        };
        MdbCarouselComponent.prototype._emulateTransitionEnd = function (element, duration) {
            var eventEmitted = false;
            var durationPadding = 5;
            var emulatedDuration = duration + durationPadding;
            rxjs.fromEvent(element, 'transitionend')
                .pipe(operators.take(1))
                .subscribe(function () {
                eventEmitted = true;
            });
            setTimeout(function () {
                if (!eventEmitted) {
                    element.dispatchEvent(new Event('transitionend'));
                }
            }, emulatedDuration);
        };
        MdbCarouselComponent.prototype._getNewSlideIndex = function (direction) {
            var newSlideIndex;
            if (direction === Direction.NEXT) {
                newSlideIndex = this._getNextSlideIndex();
            }
            if (direction === Direction.PREV) {
                newSlideIndex = this._getPrevSlideIndex();
            }
            return newSlideIndex;
        };
        MdbCarouselComponent.prototype._getNextSlideIndex = function () {
            var isLast = this._activeSlide === this.items.length - 1;
            if (!isLast) {
                return this._activeSlide + 1;
            }
            else if (this.wrap && isLast) {
                return 0;
            }
            else {
                return this._activeSlide;
            }
        };
        MdbCarouselComponent.prototype._getPrevSlideIndex = function () {
            var isFirst = this._activeSlide === 0;
            if (!isFirst) {
                return this._activeSlide - 1;
            }
            else if (this.wrap && isFirst) {
                return this.items.length - 1;
            }
            else {
                return this._activeSlide;
            }
        };
        return MdbCarouselComponent;
    }());
    MdbCarouselComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-carousel',
                    template: "<div\n  class=\"carousel slide\"\n  [class.carousel-fade]=\"animation === 'fade'\"\n  [class.carousel-dark]=\"dark\"\n>\n  <div class=\"carousel-indicators\" *ngIf=\"indicators\">\n    <button\n      *ngFor=\"let item of items; let i = index\"\n      type=\"button\"\n      [class.active]=\"i === activeSlide\"\n      [attr.aria-current]=\"i === activeSlide\"\n      (click)=\"to(i)\"\n    ></button>\n  </div>\n\n  <div class=\"carousel-inner\">\n    <ng-content></ng-content>\n  </div>\n\n  <button *ngIf=\"controls\" class=\"carousel-control-prev\" type=\"button\" (click)=\"prev()\">\n    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n    <span class=\"visually-hidden\">Previous</span>\n  </button>\n  <button *ngIf=\"controls\" class=\"carousel-control-next\" type=\"button\" (click)=\"next()\">\n    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n    <span class=\"visually-hidden\">Next</span>\n  </button>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    MdbCarouselComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.ChangeDetectorRef }
    ]; };
    MdbCarouselComponent.propDecorators = {
        _items: [{ type: core.ContentChildren, args: [MdbCarouselItemComponent,] }],
        animation: [{ type: core.Input }],
        controls: [{ type: core.Input }],
        dark: [{ type: core.Input }],
        indicators: [{ type: core.Input }],
        ride: [{ type: core.Input }],
        interval: [{ type: core.Input }],
        keyboard: [{ type: core.Input }],
        pause: [{ type: core.Input }],
        wrap: [{ type: core.Input }],
        slide: [{ type: core.Output }],
        slideChange: [{ type: core.Output }],
        onMouseEnter: [{ type: core.HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: core.HostListener, args: ['mouseleave',] }]
    };

    var MdbCarouselModule = /** @class */ (function () {
        function MdbCarouselModule() {
        }
        return MdbCarouselModule;
    }());
    MdbCarouselModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbCarouselComponent, MdbCarouselItemComponent],
                    exports: [MdbCarouselComponent, MdbCarouselItemComponent],
                    imports: [common.CommonModule],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbCarouselComponent = MdbCarouselComponent;
    exports.MdbCarouselItemComponent = MdbCarouselItemComponent;
    exports.MdbCarouselModule = MdbCarouselModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-carousel.umd.js.map
