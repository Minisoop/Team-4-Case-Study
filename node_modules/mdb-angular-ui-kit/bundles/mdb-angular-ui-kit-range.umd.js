(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/cdk/coercion')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/range', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/cdk/coercion'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].range = {}), global.ng.core, global.ng.common, global.ng.forms, global.ng.cdk.coercion));
}(this, (function (exports, core, common, forms, coercion) { 'use strict';

    var RANGE_VALUE_ACCESOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define
        useExisting: core.forwardRef(function () { return MdbRangeComponent; }),
        multi: true,
    };
    var MdbRangeComponent = /** @class */ (function () {
        function MdbRangeComponent(_cdRef) {
            this._cdRef = _cdRef;
            this.min = 0;
            this.max = 100;
            this.rangeValueChange = new core.EventEmitter();
            this.visibility = false;
            // Control Value Accessor Methods
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        Object.defineProperty(MdbRangeComponent.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRangeComponent.prototype, "default", {
            get: function () {
                return this._default;
            },
            set: function (value) {
                this._default = value;
            },
            enumerable: false,
            configurable: true
        });
        MdbRangeComponent.prototype.onchange = function (event) {
            this.onChange(event.target.value);
        };
        MdbRangeComponent.prototype.onInput = function () {
            this.rangeValueChange.emit({ value: this.value });
            this.focusRangeInput();
        };
        MdbRangeComponent.prototype.ngAfterViewInit = function () {
            this.thumbPositionUpdate();
        };
        MdbRangeComponent.prototype.focusRangeInput = function () {
            this.input.nativeElement.focus();
            this.visibility = true;
        };
        MdbRangeComponent.prototype.blurRangeInput = function () {
            this.input.nativeElement.blur();
            this.visibility = false;
        };
        MdbRangeComponent.prototype.thumbPositionUpdate = function () {
            var rangeInput = this.input.nativeElement;
            var inputValue = rangeInput.value;
            var minValue = rangeInput.min ? rangeInput.min : 0;
            var maxValue = rangeInput.max ? rangeInput.max : 100;
            var newValue = Number(((inputValue - minValue) * 100) / (maxValue - minValue));
            this.value = inputValue;
            this.thumbStyle = { left: "calc(" + newValue + "% + (" + (8 - newValue * 0.15) + "px))" };
        };
        MdbRangeComponent.prototype.writeValue = function (value) {
            var _this = this;
            this.value = value;
            this._cdRef.markForCheck();
            setTimeout(function () {
                _this.thumbPositionUpdate();
            }, 0);
        };
        MdbRangeComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        MdbRangeComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        MdbRangeComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        return MdbRangeComponent;
    }());
    MdbRangeComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-range',
                    template: "<label for=\"id\" class=\"form-label\">{{ label }}</label>\n<div class=\"range\">\n  <input\n    #input\n    [name]=\"name\"\n    type=\"range\"\n    [disabled]=\"disabled\"\n    [id]=\"id\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [step]=\"step\"\n    [value]=\"value\"\n    [(ngModel)]=\"value\"\n    class=\"form-range\"\n    min=\"0\"\n    max=\"5\"\n    [id]=\"id\"\n    (input)=\"thumbPositionUpdate()\"\n    (blur)=\"blurRangeInput()\"\n    (mousedown)=\"focusRangeInput()\"\n    (mouseup)=\"blurRangeInput()\"\n    (touchstart)=\"focusRangeInput()\"\n    (touchend)=\"blurRangeInput()\"\n  />\n  <span #thumb class=\"thumb\" [ngStyle]=\"thumbStyle\" [ngClass]=\"{ 'thumb-active': this.visibility }\">\n    <span #thumbValue class=\"thumb-value\">{{ value }}</span>\n  </span>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    providers: [RANGE_VALUE_ACCESOR]
                },] }
    ];
    MdbRangeComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    MdbRangeComponent.propDecorators = {
        input: [{ type: core.ViewChild, args: ['input',] }],
        thumb: [{ type: core.ViewChild, args: ['thumb',] }],
        thumbValue: [{ type: core.ViewChild, args: ['thumbValue',] }],
        id: [{ type: core.Input }],
        required: [{ type: core.Input }],
        name: [{ type: core.Input }],
        value: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        label: [{ type: core.Input }],
        min: [{ type: core.Input }],
        max: [{ type: core.Input }],
        step: [{ type: core.Input }],
        default: [{ type: core.Input }],
        defaultRangeCounterClass: [{ type: core.Input }],
        rangeValueChange: [{ type: core.Output }],
        onchange: [{ type: core.HostListener, args: ['change', ['$event'],] }],
        onInput: [{ type: core.HostListener, args: ['input',] }]
    };

    var MdbRangeModule = /** @class */ (function () {
        function MdbRangeModule() {
        }
        return MdbRangeModule;
    }());
    MdbRangeModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [MdbRangeComponent],
                    exports: [MdbRangeComponent],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbRangeComponent = MdbRangeComponent;
    exports.MdbRangeModule = MdbRangeModule;
    exports.Éµa = RANGE_VALUE_ACCESOR;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-range.umd.js.map
