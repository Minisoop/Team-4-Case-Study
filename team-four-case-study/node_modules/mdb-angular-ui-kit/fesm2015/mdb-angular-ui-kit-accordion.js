import { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, ViewChild, Input, Output, HostBinding, ContentChildren, NgModule } from '@angular/core';
import { startWith, switchMap } from 'rxjs/operators';
import { Subject, merge } from 'rxjs';
import { MdbCollapseDirective, MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';

const MDB_ACCORDION_ITEM_BODY = new InjectionToken('MdbAccordionItemBodyDirective');
class MdbAccordionItemBodyDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbAccordionItemBodyDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbAccordionItemBody]',
                providers: [{ provide: MDB_ACCORDION_ITEM_BODY, useExisting: MdbAccordionItemBodyDirective }],
            },] }
];
MdbAccordionItemBodyDirective.ctorParameters = () => [
    { type: TemplateRef }
];

const MDB_ACCORDION_ITEM_HEADER = new InjectionToken('MdbAccordionItemHeaderDirective');
class MdbAccordionItemHeaderDirective {
    constructor(template) {
        this.template = template;
    }
}
MdbAccordionItemHeaderDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[mdbAccordionItemHeader]',
                providers: [{ provide: MDB_ACCORDION_ITEM_HEADER, useExisting: MdbAccordionItemHeaderDirective }],
            },] }
];
MdbAccordionItemHeaderDirective.ctorParameters = () => [
    { type: TemplateRef }
];

let uniqueHeaderId = 0;
let uniqueId = 0;
class MdbAccordionItemComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.id = `mdb-accordion-item-${uniqueId++}`;
        this._headerId = `mdb-accordion-item-header-${uniqueHeaderId++}`;
        this._isInitialized = false;
        this._shouldOpenOnInit = false;
        this.itemShow = new EventEmitter();
        this.itemShown = new EventEmitter();
        this.itemHide = new EventEmitter();
        this.itemHidden = new EventEmitter();
        this.accordionItem = true;
        this.show$ = new Subject();
        this._collapsed = true;
        this._addCollapsedClass = true;
    }
    set collapsed(value) {
        if (!this._isInitialized) {
            if (!value) {
                this._shouldOpenOnInit = true;
            }
            return;
        }
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    ngOnInit() {
        this._isInitialized = true;
        if (this._shouldOpenOnInit) {
            this.show();
        }
    }
    toggle() {
        this.collapse.toggle();
    }
    show() {
        this.collapse.show();
        this._cdRef.markForCheck();
    }
    hide() {
        this.collapse.hide();
        this._cdRef.markForCheck();
    }
    onShow() {
        this._addCollapsedClass = false;
        this.itemShow.emit(this);
        this.show$.next(this);
    }
    onHide() {
        this._addCollapsedClass = true;
        this.itemHide.emit(this);
    }
    onShown() {
        this._collapsed = false;
        this.itemShown.emit(this);
    }
    onHidden() {
        this._collapsed = true;
        this.itemHidden.emit(this);
    }
}
MdbAccordionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-accordion-item',
                template: "<h2 class=\"accordion-header\" [id]=\"_headerId\">\n  <button\n    class=\"accordion-button\"\n    type=\"button\"\n    [attr.aria-expanded]=\"!_collapsed\"\n    [attr.aria-controls]=\"id\"\n    [class.collapsed]=\"_addCollapsedClass\"\n    (click)=\"toggle()\"\n  >\n    {{ header }}\n    <ng-template *ngIf=\"_headerTemplate\" [ngTemplateOutlet]=\"_headerTemplate\"></ng-template>\n  </button>\n</h2>\n<div\n  mdbCollapse\n  (collapseShow)=\"onShow()\"\n  (collapseHide)=\"onHide()\"\n  (collapseShow)=\"onShown()\"\n  (collapseHide)=\"onHidden()\"\n  [attr.id]=\"id\"\n  [attr.aria-labelledby]=\"_headerId\"\n>\n  <div class=\"accordion-body\">\n    <ng-template *ngIf=\"_bodyTemplate\" [ngTemplateOutlet]=\"_bodyTemplate\"></ng-template>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
MdbAccordionItemComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MdbAccordionItemComponent.propDecorators = {
    _headerTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_HEADER, { read: TemplateRef, static: true },] }],
    _bodyTemplate: [{ type: ContentChild, args: [MDB_ACCORDION_ITEM_BODY, { read: TemplateRef, static: true },] }],
    collapse: [{ type: ViewChild, args: [MdbCollapseDirective, { static: true },] }],
    header: [{ type: Input }],
    collapsed: [{ type: Input }],
    id: [{ type: Input }],
    itemShow: [{ type: Output }],
    itemShown: [{ type: Output }],
    itemHide: [{ type: Output }],
    itemHidden: [{ type: Output }],
    accordionItem: [{ type: HostBinding, args: ['class.accordion-item',] }]
};

class MdbAccordionComponent {
    constructor() {
        this._flush = false;
        this._multiple = false;
        this.accordion = true;
    }
    get flush() {
        return this._flush;
    }
    set flush(value) {
        this._flush = coerceBooleanProperty(value);
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get addFlushClass() {
        return this.flush;
    }
    ngAfterContentInit() {
        this.items.changes
            .pipe(startWith(this.items), switchMap((items) => {
            return merge(...items.map((item) => item.show$));
        }))
            .subscribe((clickedItem) => this._handleMultipleItems(clickedItem));
    }
    _handleMultipleItems(clickedItem) {
        if (!this.multiple) {
            const itemsToClose = this.items.filter((item) => item !== clickedItem && !item._collapsed);
            itemsToClose.forEach((item) => item.hide());
        }
    }
}
MdbAccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-accordion',
                template: "<ng-content></ng-content>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
MdbAccordionComponent.ctorParameters = () => [];
MdbAccordionComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [MdbAccordionItemComponent,] }],
    flush: [{ type: Input }],
    multiple: [{ type: Input }],
    accordion: [{ type: HostBinding, args: ['class.accordion',] }],
    addFlushClass: [{ type: HostBinding, args: ['class.accordion-flush',] }]
};

class MdbAccordionModule {
}
MdbAccordionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MdbAccordionComponent,
                    MdbAccordionItemComponent,
                    MdbAccordionItemHeaderDirective,
                    MdbAccordionItemBodyDirective,
                ],
                imports: [CommonModule, MdbCollapseModule],
                exports: [
                    MdbAccordionComponent,
                    MdbAccordionItemComponent,
                    MdbAccordionItemHeaderDirective,
                    MdbAccordionItemBodyDirective,
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { MdbAccordionComponent, MdbAccordionItemBodyDirective, MdbAccordionItemComponent, MdbAccordionItemHeaderDirective, MdbAccordionModule, MDB_ACCORDION_ITEM_HEADER as ɵa, MDB_ACCORDION_ITEM_BODY as ɵb };
//# sourceMappingURL=mdb-angular-ui-kit-accordion.js.map
