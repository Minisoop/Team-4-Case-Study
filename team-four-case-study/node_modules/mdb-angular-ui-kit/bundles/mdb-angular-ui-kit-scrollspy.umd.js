(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/scrollspy', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].scrollspy = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, rxjs, operators) { 'use strict';

    var MdbScrollspyLinkDirective = /** @class */ (function () {
        function MdbScrollspyLinkDirective(cdRef, document) {
            this.cdRef = cdRef;
            this.document = document;
            this._scrollIntoView = true;
            this.scrollspyLink = true;
            this.active = false;
        }
        Object.defineProperty(MdbScrollspyLinkDirective.prototype, "scrollIntoView", {
            get: function () {
                return this._scrollIntoView;
            },
            set: function (value) {
                this._scrollIntoView = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbScrollspyLinkDirective.prototype, "section", {
            get: function () {
                return this._section;
            },
            set: function (value) {
                if (value) {
                    this._section = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbScrollspyLinkDirective.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (newId) {
                if (newId) {
                    this._id = newId;
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbScrollspyLinkDirective.prototype.onClick = function () {
            if (this.section && this.scrollIntoView === true) {
                this.section.scrollIntoView();
            }
        };
        MdbScrollspyLinkDirective.prototype.detectChanges = function () {
            this.cdRef.detectChanges();
        };
        MdbScrollspyLinkDirective.prototype.assignSectionToId = function () {
            this.section = this.document.documentElement.querySelector("#" + this.id);
        };
        MdbScrollspyLinkDirective.prototype.ngOnInit = function () {
            this.assignSectionToId();
        };
        return MdbScrollspyLinkDirective;
    }());
    MdbScrollspyLinkDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbScrollspyLink]',
                },] }
    ];
    MdbScrollspyLinkDirective.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    MdbScrollspyLinkDirective.propDecorators = {
        scrollIntoView: [{ type: core.Input }],
        id: [{ type: core.Input, args: ['mdbScrollspyLink',] }],
        scrollspyLink: [{ type: core.HostBinding, args: ['class.scrollspy-link',] }],
        active: [{ type: core.HostBinding, args: ['class.active',] }],
        onClick: [{ type: core.HostListener, args: ['click', [],] }]
    };

    var MdbScrollspyService = /** @class */ (function () {
        function MdbScrollspyService() {
            this.scrollSpys = [];
            this.activeSubject = new rxjs.Subject();
            this.active$ = this.activeSubject;
        }
        MdbScrollspyService.prototype.addScrollspy = function (scrollSpy) {
            this.scrollSpys.push(scrollSpy);
        };
        MdbScrollspyService.prototype.removeScrollspy = function (scrollSpyId) {
            var scrollSpyIndex = this.scrollSpys.findIndex(function (spy) {
                return spy.id === scrollSpyId;
            });
            this.scrollSpys.splice(scrollSpyIndex, 1);
        };
        MdbScrollspyService.prototype.updateActiveState = function (scrollSpyId, activeLinkId) {
            var scrollSpy = this.scrollSpys.find(function (spy) {
                return spy.id === scrollSpyId;
            });
            if (!scrollSpy) {
                return;
            }
            var activeLink = scrollSpy.links.find(function (link) {
                return link.id === activeLinkId;
            });
            this.setActiveLink(activeLink);
        };
        MdbScrollspyService.prototype.removeActiveState = function (scrollSpyId, activeLinkId) {
            var scrollSpy = this.scrollSpys.find(function (spy) {
                return spy.id === scrollSpyId;
            });
            if (!scrollSpy) {
                return;
            }
            var activeLink = scrollSpy.links.find(function (link) {
                return link.id === activeLinkId;
            });
            if (!activeLink) {
                return;
            }
            activeLink.active = false;
            activeLink.detectChanges();
        };
        MdbScrollspyService.prototype.setActiveLink = function (activeLink) {
            if (activeLink) {
                activeLink.active = true;
                activeLink.detectChanges();
                this.activeSubject.next(activeLink);
            }
        };
        MdbScrollspyService.prototype.removeActiveLinks = function (scrollSpyId) {
            var scrollSpy = this.scrollSpys.find(function (spy) {
                return spy.id === scrollSpyId;
            });
            if (!scrollSpy) {
                return;
            }
            scrollSpy.links.forEach(function (link) {
                link.active = false;
                link.detectChanges();
            });
        };
        return MdbScrollspyService;
    }());
    MdbScrollspyService.decorators = [
        { type: core.Injectable }
    ];

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbScrollspyDirective = /** @class */ (function () {
        function MdbScrollspyDirective(scrollSpyService) {
            this.scrollSpyService = scrollSpyService;
            this._destroy$ = new rxjs.Subject();
            this.activeLinkChange = new core.EventEmitter();
        }
        Object.defineProperty(MdbScrollspyDirective.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (newId) {
                if (newId) {
                    this._id = newId;
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbScrollspyDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.activeSub = this.scrollSpyService.active$
                .pipe(operators.takeUntil(this._destroy$), operators.distinctUntilChanged())
                .subscribe(function (activeLink) {
                _this.activeLinkChange.emit(activeLink);
            });
        };
        MdbScrollspyDirective.prototype.ngAfterContentInit = function () {
            this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });
        };
        MdbScrollspyDirective.prototype.ngOnDestroy = function () {
            this.scrollSpyService.removeScrollspy(this.id);
            this._destroy$.next();
            this._destroy$.complete();
        };
        return MdbScrollspyDirective;
    }());
    MdbScrollspyDirective.decorators = [
        { type: core.Component, args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[mdbScrollspy]',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    MdbScrollspyDirective.ctorParameters = function () { return [
        { type: MdbScrollspyService }
    ]; };
    MdbScrollspyDirective.propDecorators = {
        links: [{ type: core.ContentChildren, args: [MdbScrollspyLinkDirective, { descendants: true },] }],
        id: [{ type: core.Input, args: ['mdbScrollspy',] }],
        activeLinkChange: [{ type: core.Output }]
    };

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var MdbScrollspyElementDirective = /** @class */ (function () {
        function MdbScrollspyElementDirective(_elementRef, renderer, ngZone, scrollSpyService) {
            this._elementRef = _elementRef;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.scrollSpyService = scrollSpyService;
            this.offset = 0;
        }
        Object.defineProperty(MdbScrollspyElementDirective.prototype, "host", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbScrollspyElementDirective.prototype, "scrollSpyId", {
            get: function () {
                return this._scrollSpyId;
            },
            set: function (newId) {
                if (newId) {
                    this._scrollSpyId = newId;
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbScrollspyElementDirective.prototype.isElementInViewport = function () {
            var scrollTop = this.container.scrollTop;
            var elTop = this.host.offsetTop - this.offset;
            var elHeight = this.host.offsetHeight;
            return scrollTop >= elTop && scrollTop < elTop + elHeight;
        };
        MdbScrollspyElementDirective.prototype.updateActiveState = function (scrollSpyId, id) {
            if (this.isElementInViewport()) {
                this.scrollSpyService.removeActiveLinks(scrollSpyId);
                this.scrollSpyService.updateActiveState(scrollSpyId, id);
            }
        };
        MdbScrollspyElementDirective.prototype.onScroll = function () {
            this.updateActiveState(this.scrollSpyId, this.id);
        };
        MdbScrollspyElementDirective.prototype.listenToScroll = function () {
            var _this = this;
            this.renderer.listen(this.container, 'scroll', function () {
                _this.onScroll();
            });
        };
        MdbScrollspyElementDirective.prototype.ngOnInit = function () {
            this.id = this.host.id;
            if (!this.container) {
                this.container = this._getClosestEl(this.host, '.scrollspy-container');
            }
            this.renderer.setStyle(this.container, 'position', 'relative');
            this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));
        };
        MdbScrollspyElementDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.updateActiveState(_this.scrollSpyId, _this.id);
            }, 0);
        };
        MdbScrollspyElementDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== document; el = el.parentNode) {
                if (el.matches && el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        return MdbScrollspyElementDirective;
    }());
    MdbScrollspyElementDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbScrollspyElement]',
                },] }
    ];
    MdbScrollspyElementDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.NgZone },
        { type: MdbScrollspyService }
    ]; };
    MdbScrollspyElementDirective.propDecorators = {
        container: [{ type: core.Input }],
        scrollSpyId: [{ type: core.Input, args: ['mdbScrollspyElement',] }],
        offset: [{ type: core.Input }]
    };

    var MdbScrollspyWindowDirective = /** @class */ (function () {
        function MdbScrollspyWindowDirective(document, el, renderer, ngZone, scrollSpyService) {
            this.document = document;
            this.el = el;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.scrollSpyService = scrollSpyService;
            this.offset = 0;
        }
        Object.defineProperty(MdbScrollspyWindowDirective.prototype, "scrollSpyId", {
            get: function () {
                return this._scrollSpyId;
            },
            set: function (newId) {
                if (newId) {
                    this._scrollSpyId = newId;
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbScrollspyWindowDirective.prototype.isElementInViewport = function () {
            var scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;
            var elHeight = this.el.nativeElement.offsetHeight;
            var elTop = this.el.nativeElement.offsetTop - this.offset;
            var elBottom = elTop + elHeight;
            return scrollTop >= elTop && scrollTop <= elBottom;
        };
        MdbScrollspyWindowDirective.prototype.updateActiveState = function (scrollSpyId, id) {
            if (this.isElementInViewport()) {
                this.scrollSpyService.updateActiveState(scrollSpyId, id);
            }
            else {
                this.scrollSpyService.removeActiveState(scrollSpyId, id);
            }
        };
        MdbScrollspyWindowDirective.prototype.onScroll = function () {
            this.updateActiveState(this.scrollSpyId, this.id);
        };
        MdbScrollspyWindowDirective.prototype.listenToScroll = function () {
            var _this = this;
            this.renderer.listen(window, 'scroll', function () {
                _this.onScroll();
            });
        };
        MdbScrollspyWindowDirective.prototype.ngOnInit = function () {
            this.id = this.el.nativeElement.id;
            this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));
        };
        MdbScrollspyWindowDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.updateActiveState(_this.scrollSpyId, _this.id);
            }, 0);
        };
        return MdbScrollspyWindowDirective;
    }());
    MdbScrollspyWindowDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbScrollspyWindow]',
                },] }
    ];
    MdbScrollspyWindowDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: core.NgZone },
        { type: MdbScrollspyService }
    ]; };
    MdbScrollspyWindowDirective.propDecorators = {
        scrollSpyId: [{ type: core.Input, args: ['mdbScrollspyWindow',] }],
        offset: [{ type: core.Input }]
    };

    var MdbScrollspyModule = /** @class */ (function () {
        function MdbScrollspyModule() {
        }
        return MdbScrollspyModule;
    }());
    MdbScrollspyModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        MdbScrollspyDirective,
                        MdbScrollspyLinkDirective,
                        MdbScrollspyElementDirective,
                        MdbScrollspyWindowDirective,
                    ],
                    exports: [
                        MdbScrollspyDirective,
                        MdbScrollspyLinkDirective,
                        MdbScrollspyElementDirective,
                        MdbScrollspyWindowDirective,
                    ],
                    providers: [MdbScrollspyService],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbScrollspyDirective = MdbScrollspyDirective;
    exports.MdbScrollspyElementDirective = MdbScrollspyElementDirective;
    exports.MdbScrollspyLinkDirective = MdbScrollspyLinkDirective;
    exports.MdbScrollspyModule = MdbScrollspyModule;
    exports.MdbScrollspyService = MdbScrollspyService;
    exports.MdbScrollspyWindowDirective = MdbScrollspyWindowDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-scrollspy.umd.js.map
