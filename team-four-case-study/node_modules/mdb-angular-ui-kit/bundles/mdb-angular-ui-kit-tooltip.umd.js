(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/animations'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/tooltip', ['exports', '@angular/core', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/animations', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].tooltip = {}), global.ng.core, global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.animations, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, core, overlay, portal, animations, rxjs, operators, common) { 'use strict';

    var MdbTooltipComponent = /** @class */ (function () {
        function MdbTooltipComponent(_cdRef) {
            this._cdRef = _cdRef;
            this._hidden = new rxjs.Subject();
            this.animationState = 'hidden';
        }
        MdbTooltipComponent.prototype.markForCheck = function () {
            this._cdRef.markForCheck();
        };
        MdbTooltipComponent.prototype.onAnimationEnd = function (event) {
            if (event.toState === 'hidden') {
                this._hidden.next();
            }
        };
        return MdbTooltipComponent;
    }());
    MdbTooltipComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-tooltip',
                    template: "<div\n  *ngIf=\"html\"\n  [@fade]=\"animationState\"\n  (@fade.done)=\"onAnimationEnd($event)\"\n  [@.disabled]=\"!animation\"\n  [innerHTML]=\"title\"\n  class=\"tooltip-inner\"\n></div>\n<div\n  *ngIf=\"!html\"\n  [@fade]=\"animationState\"\n  (@fade.done)=\"onAnimationEnd($event)\"\n  [@.disabled]=\"!animation\"\n  class=\"tooltip-inner\"\n>\n  {{ title }}\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    animations: [
                        animations.trigger('fade', [
                            animations.state('visible', animations.style({ opacity: 1 })),
                            animations.state('hidden', animations.style({ opacity: 0 })),
                            animations.transition('visible => hidden', animations.animate('150ms linear')),
                            animations.transition(':enter', animations.animate('150ms linear')),
                        ]),
                    ]
                },] }
    ];
    MdbTooltipComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef }
    ]; };
    MdbTooltipComponent.propDecorators = {
        title: [{ type: core.Input }],
        html: [{ type: core.Input }],
        animation: [{ type: core.Input }]
    };

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbTooltipDirective = /** @class */ (function () {
        function MdbTooltipDirective(_overlay, _overlayPositionBuilder, _elementRef) {
            this._overlay = _overlay;
            this._overlayPositionBuilder = _overlayPositionBuilder;
            this._elementRef = _elementRef;
            this.mdbTooltip = '';
            this.tooltipDisabled = false;
            this.placement = 'top';
            this.html = false;
            this.animation = true;
            this.trigger = 'hover focus';
            this.delayShow = 0;
            this.delayHide = 0;
            this.offset = 4;
            this.tooltipShow = new core.EventEmitter();
            this.tooltipShown = new core.EventEmitter();
            this.tooltipHide = new core.EventEmitter();
            this.tooltipHidden = new core.EventEmitter();
            this._open = false;
            this._showTimeout = 0;
            this._hideTimeout = 0;
            this._destroy$ = new rxjs.Subject();
        }
        MdbTooltipDirective.prototype.ngOnInit = function () {
            if (this.tooltipDisabled) {
                return;
            }
            this._bindTriggerEvents();
        };
        MdbTooltipDirective.prototype.ngOnDestroy = function () {
            if (this._open || this._showTimeout) {
                this.hide();
            }
            this._destroy$.next();
            this._destroy$.complete();
        };
        MdbTooltipDirective.prototype._bindTriggerEvents = function () {
            var _this = this;
            var triggers = this.trigger.split(' ');
            triggers.forEach(function (trigger) {
                if (trigger === 'click') {
                    rxjs.fromEvent(_this._elementRef.nativeElement, trigger)
                        .pipe(operators.takeUntil(_this._destroy$))
                        .subscribe(function () { return _this.toggle(); });
                }
                else if (trigger !== 'manual') {
                    var evIn = trigger === 'hover' ? 'mouseenter' : 'focusin';
                    var evOut = trigger === 'hover' ? 'mouseleave' : 'focusout';
                    rxjs.fromEvent(_this._elementRef.nativeElement, evIn)
                        .pipe(operators.takeUntil(_this._destroy$))
                        .subscribe(function () { return _this.show(); });
                    rxjs.fromEvent(_this._elementRef.nativeElement, evOut)
                        .pipe(operators.takeUntil(_this._destroy$))
                        .subscribe(function () { return _this.hide(); });
                }
            });
        };
        MdbTooltipDirective.prototype._createOverlayConfig = function () {
            var positionStrategy = this._overlayPositionBuilder
                .flexibleConnectedTo(this._elementRef)
                .withPositions(this._getPosition());
            var overlayConfig = new overlay.OverlayConfig({
                hasBackdrop: false,
                scrollStrategy: this._overlay.scrollStrategies.reposition(),
                positionStrategy: positionStrategy,
            });
            return overlayConfig;
        };
        MdbTooltipDirective.prototype._createOverlay = function () {
            this._overlayRef = this._overlay.create(this._createOverlayConfig());
        };
        MdbTooltipDirective.prototype._getPosition = function () {
            var position;
            var positionTop = {
                originX: 'center',
                originY: 'top',
                overlayX: 'center',
                overlayY: 'bottom',
                offsetY: -this.offset,
            };
            var positionBottom = {
                originX: 'center',
                originY: 'bottom',
                overlayX: 'center',
                overlayY: 'top',
                offsetY: this.offset,
            };
            var positionRight = {
                originX: 'end',
                originY: 'center',
                overlayX: 'start',
                overlayY: 'center',
                offsetX: this.offset,
            };
            var positionLeft = {
                originX: 'start',
                originY: 'center',
                overlayX: 'end',
                overlayY: 'center',
                offsetX: -this.offset,
            };
            switch (this.placement) {
                case 'top':
                    position = [positionTop, positionBottom];
                    break;
                case 'bottom':
                    position = [positionBottom, positionTop];
                    break;
                case 'left':
                    position = [positionLeft, positionRight];
                    break;
                case 'right':
                    position = [positionRight, positionLeft];
                    break;
                default:
                    break;
            }
            return position;
        };
        MdbTooltipDirective.prototype.show = function () {
            var _this = this;
            if (this._hideTimeout || this._open) {
                this._overlayRef.detach();
                clearTimeout(this._hideTimeout);
                this._hideTimeout = null;
            }
            this._createOverlay();
            this._showTimeout = setTimeout(function () {
                var tooltipPortal = new portal.ComponentPortal(MdbTooltipComponent);
                _this.tooltipShow.emit(_this);
                _this._open = true;
                _this._tooltipRef = _this._overlayRef.attach(tooltipPortal);
                _this._tooltipRef.instance.title = _this.mdbTooltip;
                _this._tooltipRef.instance.html = _this.html;
                _this._tooltipRef.instance.animation = _this.animation;
                _this._tooltipRef.instance.animationState = 'visible';
                _this._tooltipRef.instance.markForCheck();
                _this.tooltipShown.emit(_this);
            }, this.delayShow);
        };
        MdbTooltipDirective.prototype.hide = function () {
            var _this = this;
            if (this._showTimeout) {
                clearTimeout(this._showTimeout);
                this._showTimeout = null;
            }
            else {
                return;
            }
            this._hideTimeout = setTimeout(function () {
                _this.tooltipHide.emit(_this);
                if (!_this._tooltipRef) {
                    _this._overlayRef.detach();
                    _this._open = false;
                    _this.tooltipHidden.emit(_this);
                }
                else {
                    _this._tooltipRef.instance._hidden.pipe(operators.first()).subscribe(function () {
                        _this._overlayRef.detach();
                        _this._open = false;
                        _this.tooltipHidden.emit(_this);
                    });
                    _this._tooltipRef.instance.animationState = 'hidden';
                    _this._tooltipRef.instance.markForCheck();
                }
            }, this.delayHide);
        };
        MdbTooltipDirective.prototype.toggle = function () {
            if (this._open) {
                this.hide();
            }
            else {
                this.show();
            }
        };
        return MdbTooltipDirective;
    }());
    MdbTooltipDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbTooltip]',
                    exportAs: 'mdbTooltip',
                },] }
    ];
    MdbTooltipDirective.ctorParameters = function () { return [
        { type: overlay.Overlay },
        { type: overlay.OverlayPositionBuilder },
        { type: core.ElementRef }
    ]; };
    MdbTooltipDirective.propDecorators = {
        mdbTooltip: [{ type: core.Input }],
        tooltipDisabled: [{ type: core.Input }],
        placement: [{ type: core.Input }],
        html: [{ type: core.Input }],
        animation: [{ type: core.Input }],
        trigger: [{ type: core.Input }],
        delayShow: [{ type: core.Input }],
        delayHide: [{ type: core.Input }],
        offset: [{ type: core.Input }],
        tooltipShow: [{ type: core.Output }],
        tooltipShown: [{ type: core.Output }],
        tooltipHide: [{ type: core.Output }],
        tooltipHidden: [{ type: core.Output }]
    };

    var MdbTooltipModule = /** @class */ (function () {
        function MdbTooltipModule() {
        }
        return MdbTooltipModule;
    }());
    MdbTooltipModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, overlay.OverlayModule],
                    declarations: [MdbTooltipDirective, MdbTooltipComponent],
                    exports: [MdbTooltipDirective, MdbTooltipComponent],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbTooltipDirective = MdbTooltipDirective;
    exports.MdbTooltipModule = MdbTooltipModule;
    exports.ɵa = MdbTooltipComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-tooltip.umd.js.map
