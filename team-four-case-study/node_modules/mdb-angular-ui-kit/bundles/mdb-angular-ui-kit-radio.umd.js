(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/radio', ['exports', '@angular/cdk/coercion', '@angular/core', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].radio = {}), global.ng.cdk.coercion, global.ng.core, global.ng.forms, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, coercion, core, forms, rxjs, operators, common) { 'use strict';

    var MdbRadioDirective = /** @class */ (function () {
        function MdbRadioDirective() {
            this._checked = false;
            this._value = null;
            this._disabled = false;
        }
        Object.defineProperty(MdbRadioDirective.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (value) {
                this._checked = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "isDisabled", {
            get: function () {
                return this._disabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "isChecked", {
            get: function () {
                return this._checked;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioDirective.prototype, "nameAttr", {
            get: function () {
                return this.name;
            },
            enumerable: false,
            configurable: true
        });
        MdbRadioDirective.prototype._updateName = function (value) {
            this._name = value;
        };
        MdbRadioDirective.prototype._updateChecked = function (value) {
            this._checked = value;
        };
        MdbRadioDirective.prototype._updateDisabledState = function (value) {
            this._disabled = value;
        };
        return MdbRadioDirective;
    }());
    MdbRadioDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbRadio]',
                },] }
    ];
    MdbRadioDirective.ctorParameters = function () { return []; };
    MdbRadioDirective.propDecorators = {
        name: [{ type: core.Input }],
        checked: [{ type: core.Input, args: ['checked',] }],
        value: [{ type: core.Input, args: ['value',] }],
        disabled: [{ type: core.Input, args: ['disabled',] }],
        isDisabled: [{ type: core.HostBinding, args: ['disabled',] }],
        isChecked: [{ type: core.HostBinding, args: ['checked',] }],
        nameAttr: [{ type: core.HostBinding, args: ['attr.name',] }]
    };

    var MDB_RADIO_GROUP_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define
        useExisting: core.forwardRef(function () { return MdbRadioGroupDirective; }),
        multi: true,
    };
    var MdbRadioGroupDirective = /** @class */ (function () {
        function MdbRadioGroupDirective() {
            this._disabled = false;
            this._destroy$ = new rxjs.Subject();
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        Object.defineProperty(MdbRadioGroupDirective.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
                if (this.radios) {
                    this._updateChecked();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioGroupDirective.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (name) {
                this._name = name;
                if (this.radios) {
                    this._updateNames();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRadioGroupDirective.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                this._disabled = disabled;
                if (this.radios) {
                    this._updateDisabled();
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbRadioGroupDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._updateNames();
            this._updateDisabled();
            this.radios.changes
                .pipe(operators.startWith(this.radios), operators.switchMap(function (radios) { return rxjs.from(Promise.resolve(radios)); }), operators.takeUntil(this._destroy$))
                .subscribe(function () { return _this._updateRadiosState(); });
        };
        MdbRadioGroupDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        MdbRadioGroupDirective.prototype._updateRadiosState = function () {
            this._updateNames();
            this._updateChecked();
            this._updateDisabled();
        };
        MdbRadioGroupDirective.prototype._updateNames = function () {
            var _this = this;
            this.radios.forEach(function (radio) { return radio._updateName(_this.name); });
        };
        MdbRadioGroupDirective.prototype._updateChecked = function () {
            var _this = this;
            this.radios.forEach(function (radio) {
                var isChecked = radio.value === _this._value;
                radio._updateChecked(isChecked);
            });
        };
        MdbRadioGroupDirective.prototype._updateDisabled = function () {
            var _this = this;
            this.radios.forEach(function (radio) { return radio._updateDisabledState(_this._disabled); });
        };
        // Control value accessor methods
        MdbRadioGroupDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        MdbRadioGroupDirective.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        MdbRadioGroupDirective.prototype.setDisabledState = function (isDisabled) {
            this._disabled = isDisabled;
            this._updateDisabled();
        };
        MdbRadioGroupDirective.prototype.writeValue = function (value) {
            this.value = value;
        };
        return MdbRadioGroupDirective;
    }());
    MdbRadioGroupDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbRadioGroup]',
                    providers: [MDB_RADIO_GROUP_VALUE_ACCESSOR],
                },] }
    ];
    MdbRadioGroupDirective.propDecorators = {
        radios: [{ type: core.ContentChildren, args: [MdbRadioDirective, { descendants: true },] }],
        value: [{ type: core.Input }],
        name: [{ type: core.Input }],
        disabled: [{ type: core.Input }]
    };

    var MdbRadioModule = /** @class */ (function () {
        function MdbRadioModule() {
        }
        return MdbRadioModule;
    }());
    MdbRadioModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbRadioDirective, MdbRadioGroupDirective],
                    exports: [MdbRadioDirective, MdbRadioGroupDirective],
                    imports: [common.CommonModule, forms.FormsModule],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MDB_RADIO_GROUP_VALUE_ACCESSOR = MDB_RADIO_GROUP_VALUE_ACCESSOR;
    exports.MdbRadioDirective = MdbRadioDirective;
    exports.MdbRadioGroupDirective = MdbRadioGroupDirective;
    exports.MdbRadioModule = MdbRadioModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-radio.umd.js.map
