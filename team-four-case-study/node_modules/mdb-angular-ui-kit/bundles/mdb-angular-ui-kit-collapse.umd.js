(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/collapse', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].collapse = {}), global.ng.core, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, rxjs, operators) { 'use strict';

    var TRANSITION_TIME = 350;
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbCollapseDirective = /** @class */ (function () {
        function MdbCollapseDirective(_elementRef, _renderer) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this.collapseClass = true;
            this.collapseShow = new core.EventEmitter();
            this.collapseShown = new core.EventEmitter();
            this.collapseHide = new core.EventEmitter();
            this.collapseHidden = new core.EventEmitter();
            this._collapsed = true;
            this._isTransitioning = false;
        }
        Object.defineProperty(MdbCollapseDirective.prototype, "collapsed", {
            get: function () {
                return this._collapsed;
            },
            set: function (collapsed) {
                if (collapsed !== this._collapsed) {
                    collapsed ? this.hide() : this.show();
                    this._collapsed = collapsed;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbCollapseDirective.prototype, "host", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        MdbCollapseDirective.prototype.show = function () {
            var _this = this;
            if (this._isTransitioning || !this.collapsed) {
                return;
            }
            this.collapseShow.emit(this);
            this._renderer.removeClass(this.host, 'collapse');
            this._renderer.addClass(this.host, 'collapsing');
            this._renderer.setStyle(this.host, 'height', '0px');
            this._isTransitioning = true;
            var scrollHeight = this.host.scrollHeight;
            rxjs.fromEvent(this.host, 'transitionend')
                .pipe(operators.take(1))
                .subscribe(function () {
                _this._isTransitioning = false;
                _this.collapsed = false;
                _this._renderer.removeClass(_this.host, 'collapsing');
                _this._renderer.addClass(_this.host, 'collapse');
                _this._renderer.addClass(_this.host, 'show');
                _this._renderer.removeStyle(_this.host, 'height');
                _this.collapseShown.emit(_this);
            });
            this._emulateTransitionEnd(this.host, TRANSITION_TIME);
            this._renderer.setStyle(this.host, 'height', scrollHeight + "px");
        };
        MdbCollapseDirective.prototype.hide = function () {
            var _this = this;
            if (this._isTransitioning || this.collapsed) {
                return;
            }
            this.collapseHide.emit(this);
            var hostHeight = this.host.getBoundingClientRect().height;
            this._renderer.setStyle(this.host, 'height', hostHeight + "px");
            this._reflow(this.host);
            this._renderer.addClass(this.host, 'collapsing');
            this._renderer.removeClass(this.host, 'collapse');
            this._renderer.removeClass(this.host, 'show');
            this._isTransitioning = true;
            rxjs.fromEvent(this.host, 'transitionend')
                .pipe(operators.take(1))
                .subscribe(function () {
                _this._renderer.removeClass(_this.host, 'collapsing');
                _this._renderer.addClass(_this.host, 'collapse');
                _this._isTransitioning = false;
                _this.collapsed = true;
                _this.collapseHidden.emit(_this);
            });
            this._renderer.removeStyle(this.host, 'height');
            this._emulateTransitionEnd(this.host, TRANSITION_TIME);
        };
        MdbCollapseDirective.prototype.toggle = function () {
            if (this._isTransitioning) {
                return;
            }
            this.collapsed = !this.collapsed;
            this.collapsed ? this.hide() : this.show();
        };
        MdbCollapseDirective.prototype._reflow = function (element) {
            return element.offsetHeight;
        };
        MdbCollapseDirective.prototype._emulateTransitionEnd = function (element, duration) {
            var eventEmitted = false;
            var durationPadding = 5;
            var emulatedDuration = duration + durationPadding;
            rxjs.fromEvent(element, 'transitionend')
                .pipe(operators.take(1))
                .subscribe(function () {
                eventEmitted = true;
            });
            setTimeout(function () {
                if (!eventEmitted) {
                    element.dispatchEvent(new Event('transitionend'));
                }
            }, emulatedDuration);
        };
        return MdbCollapseDirective;
    }());
    MdbCollapseDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbCollapse]',
                    exportAs: 'mdbCollapse',
                },] }
    ];
    MdbCollapseDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    MdbCollapseDirective.propDecorators = {
        collapseClass: [{ type: core.HostBinding, args: ['class.collapse',] }],
        collapseShow: [{ type: core.Output }],
        collapseShown: [{ type: core.Output }],
        collapseHide: [{ type: core.Output }],
        collapseHidden: [{ type: core.Output }],
        collapsed: [{ type: core.Input }]
    };

    var MdbCollapseModule = /** @class */ (function () {
        function MdbCollapseModule() {
        }
        return MdbCollapseModule;
    }());
    MdbCollapseModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbCollapseDirective],
                    exports: [MdbCollapseDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbCollapseDirective = MdbCollapseDirective;
    exports.MdbCollapseModule = MdbCollapseModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-collapse.umd.js.map
