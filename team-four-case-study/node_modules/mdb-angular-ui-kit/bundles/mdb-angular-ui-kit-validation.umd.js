(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/validation', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].validation = {}), global.ng.cdk.coercion, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, coercion, core, rxjs, operators, common) { 'use strict';

    var MdbValidateDirective = /** @class */ (function () {
        function MdbValidateDirective(renderer, _elementRef) {
            this.renderer = renderer;
            this._elementRef = _elementRef;
            this._validate = true;
            this._validateSuccess = true;
            this._validateError = true;
        }
        Object.defineProperty(MdbValidateDirective.prototype, "mdbValidate", {
            get: function () {
                return this._mdbValidate;
            },
            set: function (value) {
                this._mdbValidate = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbValidateDirective.prototype, "validate", {
            get: function () {
                return this._validate;
            },
            set: function (value) {
                this._validate = coercion.coerceBooleanProperty(value);
                this.updateErrorClass();
                this.updateSuccessClass();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbValidateDirective.prototype, "validateSuccess", {
            get: function () {
                return this._validateSuccess;
            },
            set: function (value) {
                this._validateSuccess = coercion.coerceBooleanProperty(value);
                this.updateSuccessClass();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbValidateDirective.prototype, "validateError", {
            get: function () {
                return this._validateError;
            },
            set: function (value) {
                this._validateError = coercion.coerceBooleanProperty(value);
                this.updateErrorClass();
                this.updateSuccessClass();
            },
            enumerable: false,
            configurable: true
        });
        MdbValidateDirective.prototype.updateSuccessClass = function () {
            if (this.validate && this.validateSuccess) {
                this.renderer.addClass(this._elementRef.nativeElement, 'validate-success');
            }
            else {
                this.renderer.removeClass(this._elementRef.nativeElement, 'validate-success');
            }
        };
        MdbValidateDirective.prototype.updateErrorClass = function () {
            if (this.validate && this.validateError) {
                this.renderer.addClass(this._elementRef.nativeElement, 'validate-error');
            }
            else {
                this.renderer.removeClass(this._elementRef.nativeElement, 'validate-error');
            }
        };
        MdbValidateDirective.prototype.ngOnInit = function () {
            this.updateSuccessClass();
            this.updateErrorClass();
        };
        return MdbValidateDirective;
    }());
    MdbValidateDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbValidate]',
                },] }
    ];
    MdbValidateDirective.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef }
    ]; };
    MdbValidateDirective.propDecorators = {
        mdbValidate: [{ type: core.Input }],
        validate: [{ type: core.Input }],
        validateSuccess: [{ type: core.Input }],
        validateError: [{ type: core.Input }]
    };

    var defaultIdNumber$1 = 0;
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbErrorDirective = /** @class */ (function () {
        function MdbErrorDirective(_elementRef, renderer) {
            this._elementRef = _elementRef;
            this.renderer = renderer;
            this.id = "mdb-error-" + defaultIdNumber$1++;
            this.errorMsg = true;
            this.messageId = this.id;
            this._destroy$ = new rxjs.Subject();
        }
        MdbErrorDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== document; el = el.parentNode) {
                if (el.matches && el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        MdbErrorDirective.prototype.ngOnInit = function () {
            var _this = this;
            var textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');
            if (textarea) {
                var height_1 = textarea.offsetHeight + 4 + 'px';
                this.renderer.setStyle(this._elementRef.nativeElement, 'top', height_1);
                rxjs.fromEvent(textarea, 'keyup')
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    height_1 = textarea.offsetHeight + 4 + 'px';
                    _this.renderer.setStyle(_this._elementRef.nativeElement, 'top', height_1);
                });
            }
        };
        MdbErrorDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return MdbErrorDirective;
    }());
    MdbErrorDirective.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-error',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    MdbErrorDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    MdbErrorDirective.propDecorators = {
        id: [{ type: core.Input }],
        errorMsg: [{ type: core.HostBinding, args: ['class.error-message',] }],
        messageId: [{ type: core.HostBinding, args: ['attr.id',] }]
    };

    var defaultIdNumber = 0;
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbSuccessDirective = /** @class */ (function () {
        function MdbSuccessDirective(_elementRef, renderer) {
            this._elementRef = _elementRef;
            this.renderer = renderer;
            this.id = "mdb-success-" + defaultIdNumber++;
            this.successMsg = true;
            this.messageId = this.id;
            this._destroy$ = new rxjs.Subject();
        }
        MdbSuccessDirective.prototype._getClosestEl = function (el, selector) {
            for (; el && el !== document; el = el.parentNode) {
                if (el.matches && el.matches(selector)) {
                    return el;
                }
            }
            return null;
        };
        MdbSuccessDirective.prototype.ngOnInit = function () {
            var _this = this;
            var textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');
            if (textarea) {
                var height_1 = textarea.offsetHeight + 4 + 'px';
                this.renderer.setStyle(this._elementRef.nativeElement, 'top', height_1);
                rxjs.fromEvent(textarea, 'keyup')
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    height_1 = textarea.offsetHeight + 4 + 'px';
                    _this.renderer.setStyle(_this._elementRef.nativeElement, 'top', height_1);
                });
            }
        };
        MdbSuccessDirective.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return MdbSuccessDirective;
    }());
    MdbSuccessDirective.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-success',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    MdbSuccessDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    MdbSuccessDirective.propDecorators = {
        id: [{ type: core.Input }],
        successMsg: [{ type: core.HostBinding, args: ['class.success-message',] }],
        messageId: [{ type: core.HostBinding, args: ['attr.id',] }]
    };

    var MdbValidationModule = /** @class */ (function () {
        function MdbValidationModule() {
        }
        return MdbValidationModule;
    }());
    MdbValidationModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective],
                    exports: [MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbErrorDirective = MdbErrorDirective;
    exports.MdbSuccessDirective = MdbSuccessDirective;
    exports.MdbValidateDirective = MdbValidateDirective;
    exports.MdbValidationModule = MdbValidationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-validation.umd.js.map
