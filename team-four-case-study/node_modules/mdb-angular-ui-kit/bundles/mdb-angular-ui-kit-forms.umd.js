(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/observers'), require('rxjs'), require('rxjs/operators'), require('@angular/cdk/coercion'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/forms', ['exports', '@angular/core', '@angular/cdk/observers', 'rxjs', 'rxjs/operators', '@angular/cdk/coercion', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].forms = {}), global.ng.core, global.ng.cdk.observers, global.rxjs, global.rxjs.operators, global.ng.cdk.coercion, global.ng.forms, global.ng.common));
}(this, (function (exports, core, observers, rxjs, operators, coercion, forms, common) { 'use strict';

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var MdbAbstractFormControl = /** @class */ (function () {
        function MdbAbstractFormControl() {
        }
        return MdbAbstractFormControl;
    }());
    MdbAbstractFormControl.decorators = [
        { type: core.Directive }
    ];

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbLabelDirective = /** @class */ (function () {
        function MdbLabelDirective() {
        }
        return MdbLabelDirective;
    }());
    MdbLabelDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbLabel]',
                    exportAs: 'mdbLabel',
                },] }
    ];
    MdbLabelDirective.ctorParameters = function () { return []; };

    var MdbFormControlComponent = /** @class */ (function () {
        function MdbFormControlComponent(_renderer, _contentObserver, _elementRef, _ngZone) {
            this._renderer = _renderer;
            this._contentObserver = _contentObserver;
            this._elementRef = _elementRef;
            this._ngZone = _ngZone;
            this.outline = true;
            this._destroy$ = new rxjs.Subject();
            this._notchLeadingLength = 9;
            this._labelMarginLeft = 0;
            this._labelGapPadding = 8;
            this._labelScale = 0.8;
            this._recalculateGapWhenVisible = false;
        }
        Object.defineProperty(MdbFormControlComponent.prototype, "input", {
            get: function () {
                return this._formControl.input;
            },
            enumerable: false,
            configurable: true
        });
        MdbFormControlComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this._label) {
                this._updateBorderGap();
            }
            else {
                this._renderer.addClass(this.input, 'placeholder-active');
            }
            this._updateLabelActiveState();
            if (this._label) {
                this._contentObserver
                    .observe(this._label.nativeElement)
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this._updateBorderGap();
                });
            }
            this._formControl.stateChanges.pipe(operators.takeUntil(this._destroy$)).subscribe(function () {
                _this._updateLabelActiveState();
                if (_this._label) {
                    _this._updateBorderGap();
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._ngZone.onStable.pipe(operators.takeUntil(_this._destroy$)).subscribe(function () {
                    if (_this._label && _this._recalculateGapWhenVisible) {
                        _this._updateBorderGap();
                    }
                });
            });
        };
        MdbFormControlComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.unsubscribe();
        };
        MdbFormControlComponent.prototype._getLabelWidth = function () {
            return this._label.nativeElement.clientWidth * this._labelScale + this._labelGapPadding;
        };
        MdbFormControlComponent.prototype._updateBorderGap = function () {
            // Element is in DOM but is not visible, we need to recalculate the gap when element
            // is displayed. This problem may occur in components such as tabs where content of
            // inactive tabs has display:none styles
            if (this._isHidden()) {
                this._recalculateGapWhenVisible = true;
                return;
            }
            var notchLeadingWidth = this._labelMarginLeft + this._notchLeadingLength + "px";
            var notchMiddleWidth = this._getLabelWidth() + "px";
            this._notchLeading.nativeElement.style.width = notchLeadingWidth;
            this._notchMiddle.nativeElement.style.width = notchMiddleWidth;
            this._label.nativeElement.style.marginLeft = this._labelMarginLeft + "px";
            this._recalculateGapWhenVisible = false;
        };
        MdbFormControlComponent.prototype._updateLabelActiveState = function () {
            if (this._isLabelActive()) {
                this._renderer.addClass(this.input, 'active');
            }
            else {
                this._renderer.removeClass(this.input, 'active');
            }
        };
        MdbFormControlComponent.prototype._isLabelActive = function () {
            return this._formControl && this._formControl.labelActive;
        };
        MdbFormControlComponent.prototype._isHidden = function () {
            var el = this._elementRef.nativeElement;
            return !el.offsetHeight && !el.offsetWidth;
        };
        return MdbFormControlComponent;
    }());
    MdbFormControlComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'mdb-form-control',
                    template: "<ng-content></ng-content>\n<div class=\"form-notch\">\n  <div #notchLeading class=\"form-notch-leading\"></div>\n  <div #notchMiddle class=\"form-notch-middle\"></div>\n  <div class=\"form-notch-trailing\"></div>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] }
    ];
    MdbFormControlComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: observers.ContentObserver },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    MdbFormControlComponent.propDecorators = {
        _notchLeading: [{ type: core.ViewChild, args: ['notchLeading', { static: true },] }],
        _notchMiddle: [{ type: core.ViewChild, args: ['notchMiddle', { static: true },] }],
        _formControl: [{ type: core.ContentChild, args: [MdbAbstractFormControl, { static: true },] }],
        _label: [{ type: core.ContentChild, args: [MdbLabelDirective, { static: true, read: core.ElementRef },] }],
        outline: [{ type: core.HostBinding, args: ['class.form-outline',] }]
    };

    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var MdbInputDirective = /** @class */ (function () {
        function MdbInputDirective(_elementRef, _renderer, _ngControl) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._ngControl = _ngControl;
            this.stateChanges = new rxjs.Subject();
            this._focused = false;
            this._disabled = false;
            this._readonly = false;
        }
        Object.defineProperty(MdbInputDirective.prototype, "disabled", {
            get: function () {
                if (this._ngControl && this._ngControl.disabled !== null) {
                    return this._ngControl.disabled;
                }
                return this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbInputDirective.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            set: function (value) {
                if (value) {
                    this._renderer.setAttribute(this._elementRef.nativeElement, 'readonly', '');
                }
                else {
                    this._renderer.removeAttribute(this._elementRef.nativeElement, 'readonly');
                }
                this._readonly = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbInputDirective.prototype, "value", {
            get: function () {
                return this._elementRef.nativeElement.value;
            },
            set: function (value) {
                if (value !== this.value) {
                    this._elementRef.nativeElement.value = value;
                    this._value = value;
                    this.stateChanges.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        MdbInputDirective.prototype._onFocus = function () {
            this._focused = true;
            this.stateChanges.next();
        };
        MdbInputDirective.prototype._onBlur = function () {
            this._focused = false;
            this.stateChanges.next();
        };
        MdbInputDirective.prototype.ngDoCheck = function () {
            var value = this._elementRef.nativeElement.value;
            if (this._currentNativeValue !== value) {
                this._currentNativeValue = value;
                this.stateChanges.next();
            }
        };
        Object.defineProperty(MdbInputDirective.prototype, "hasValue", {
            get: function () {
                return this._elementRef.nativeElement.value !== '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbInputDirective.prototype, "focused", {
            get: function () {
                return this._focused;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbInputDirective.prototype, "input", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbInputDirective.prototype, "labelActive", {
            get: function () {
                return this.focused || this.hasValue;
            },
            enumerable: false,
            configurable: true
        });
        return MdbInputDirective;
    }());
    MdbInputDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbInput]',
                    exportAs: 'mdbInput',
                    providers: [{ provide: MdbAbstractFormControl, useExisting: MdbInputDirective }],
                },] }
    ];
    MdbInputDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }
    ]; };
    MdbInputDirective.propDecorators = {
        disabled: [{ type: core.HostBinding, args: ['disabled',] }, { type: core.Input, args: ['disabled',] }],
        readonly: [{ type: core.Input, args: ['readonly',] }],
        value: [{ type: core.Input }],
        _onFocus: [{ type: core.HostListener, args: ['focus',] }],
        _onBlur: [{ type: core.HostListener, args: ['blur',] }]
    };

    var MdbFormsModule = /** @class */ (function () {
        function MdbFormsModule() {
        }
        return MdbFormsModule;
    }());
    MdbFormsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],
                    exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],
                    imports: [common.CommonModule, forms.FormsModule],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbAbstractFormControl = MdbAbstractFormControl;
    exports.MdbFormControlComponent = MdbFormControlComponent;
    exports.MdbFormsModule = MdbFormsModule;
    exports.MdbInputDirective = MdbInputDirective;
    exports.MdbLabelDirective = MdbLabelDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-forms.umd.js.map
