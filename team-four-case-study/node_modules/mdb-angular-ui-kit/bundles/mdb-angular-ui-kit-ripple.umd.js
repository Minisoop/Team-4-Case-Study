(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('mdb-angular-ui-kit/ripple', ['exports', '@angular/cdk/coercion', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['mdb-angular-ui-kit'] = global['mdb-angular-ui-kit'] || {}, global['mdb-angular-ui-kit'].ripple = {}), global.ng.cdk.coercion, global.ng.core));
}(this, (function (exports, coercion, core) { 'use strict';

    var TRANSITION_BREAK_OPACITY = 0.5;
    var GRADIENT = 'rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%';
    var DEFAULT_RIPPLE_COLOR = [0, 0, 0];
    var BOOTSTRAP_COLORS = [
        'primary',
        'secondary',
        'success',
        'danger',
        'warning',
        'info',
        'light',
        'dark',
    ];
    var MdbRippleDirective = /** @class */ (function () {
        function MdbRippleDirective(_elementRef, _renderer) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._rippleCentered = false;
            this.rippleColor = '';
            this.rippleDuration = '500ms';
            this.rippleRadius = 0;
            this._rippleUnbound = false;
            this.ripple = true;
        }
        Object.defineProperty(MdbRippleDirective.prototype, "rippleCentered", {
            get: function () {
                return this._rippleCentered;
            },
            set: function (value) {
                this._rippleCentered = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRippleDirective.prototype, "rippleUnbound", {
            get: function () {
                return this._rippleUnbound;
            },
            set: function (value) {
                this._rippleUnbound = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MdbRippleDirective.prototype, "host", {
            get: function () {
                return this._elementRef.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        MdbRippleDirective.prototype._createRipple = function (event) {
            var layerX = event.layerX, layerY = event.layerY;
            var offsetX = layerX;
            var offsetY = layerY;
            var height = this.host.offsetHeight;
            var width = this.host.offsetWidth;
            var duration = this._durationToMsNumber(this.rippleDuration);
            var diameterOptions = {
                offsetX: this.rippleCentered ? height / 2 : offsetX,
                offsetY: this.rippleCentered ? width / 2 : offsetY,
                height: height,
                width: width,
            };
            var diameter = this._getDiameter(diameterOptions);
            var radiusValue = this.rippleRadius || diameter / 2;
            var opacity = {
                delay: duration * TRANSITION_BREAK_OPACITY,
                duration: duration - duration * TRANSITION_BREAK_OPACITY,
            };
            var styles = {
                left: this.rippleCentered ? width / 2 - radiusValue + "px" : offsetX - radiusValue + "px",
                top: this.rippleCentered ? height / 2 - radiusValue + "px" : offsetY - radiusValue + "px",
                height: (this.rippleRadius * 2 || diameter) + "px",
                width: (this.rippleRadius * 2 || diameter) + "px",
                transitionDelay: "0s, " + opacity.delay + "ms",
                transitionDuration: duration + "ms, " + opacity.duration + "ms",
            };
            var rippleHTML = this._renderer.createElement('div');
            this._createHTMLRipple(this.host, rippleHTML, styles);
            this._removeHTMLRipple(rippleHTML, duration);
        };
        MdbRippleDirective.prototype._createHTMLRipple = function (wrapper, ripple, styles) {
            Object.keys(styles).forEach(function (property) { return (ripple.style[property] = styles[property]); });
            this._renderer.addClass(ripple, 'ripple-wave');
            if (this.rippleColor !== '') {
                this._removeOldColorClasses(wrapper);
                this._addColor(ripple, wrapper);
            }
            this._toggleUnbound(wrapper);
            this._appendRipple(ripple, wrapper);
        };
        MdbRippleDirective.prototype._removeHTMLRipple = function (ripple, duration) {
            setTimeout(function () {
                if (ripple) {
                    ripple.remove();
                }
            }, duration);
        };
        MdbRippleDirective.prototype._durationToMsNumber = function (time) {
            return Number(time.replace('ms', '').replace('s', '000'));
        };
        MdbRippleDirective.prototype._getDiameter = function (_a) {
            var offsetX = _a.offsetX, offsetY = _a.offsetY, height = _a.height, width = _a.width;
            var top = offsetY <= height / 2;
            var left = offsetX <= width / 2;
            var pythagorean = function (sideA, sideB) { return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2)); };
            var positionCenter = offsetY === height / 2 && offsetX === width / 2;
            // mouse position on the quadrants of the coordinate system
            var quadrant = {
                first: top === true && left === false,
                second: top === true && left === true,
                third: top === false && left === true,
                fourth: top === false && left === false,
            };
            var getCorner = {
                topLeft: pythagorean(offsetX, offsetY),
                topRight: pythagorean(width - offsetX, offsetY),
                bottomLeft: pythagorean(offsetX, height - offsetY),
                bottomRight: pythagorean(width - offsetX, height - offsetY),
            };
            var diameter = 0;
            if (positionCenter || quadrant.fourth) {
                diameter = getCorner.topLeft;
            }
            else if (quadrant.third) {
                diameter = getCorner.topRight;
            }
            else if (quadrant.second) {
                diameter = getCorner.bottomRight;
            }
            else if (quadrant.first) {
                diameter = getCorner.bottomLeft;
            }
            return diameter * 2;
        };
        MdbRippleDirective.prototype._appendRipple = function (target, parent) {
            var _this = this;
            var FIX_ADD_RIPPLE_EFFECT = 50; // delay for active animations
            this._renderer.appendChild(parent, target);
            setTimeout(function () {
                _this._renderer.addClass(target, 'active');
            }, FIX_ADD_RIPPLE_EFFECT);
        };
        MdbRippleDirective.prototype._toggleUnbound = function (target) {
            if (this.rippleUnbound) {
                this._renderer.addClass(target, 'ripple-surface-unbound');
            }
            else {
                this._renderer.removeClass(target, 'ripple-surface-unbound');
            }
        };
        MdbRippleDirective.prototype._addColor = function (target, parent) {
            var _this = this;
            var isBootstrapColor = BOOTSTRAP_COLORS.find(function (color) { return color === _this.rippleColor.toLowerCase(); });
            if (isBootstrapColor) {
                this._renderer.addClass(parent, 'ripple-surface' + "-" + this.rippleColor.toLowerCase());
            }
            else {
                var rgbValue = this._colorToRGB(this.rippleColor).join(',');
                var gradientImage = GRADIENT.split('{{color}}').join("" + rgbValue);
                target.style.backgroundImage = "radial-gradient(circle, " + gradientImage + ")";
            }
        };
        MdbRippleDirective.prototype._removeOldColorClasses = function (target) {
            var _this = this;
            var REGEXP_CLASS_COLOR = new RegExp('ripple-surface' + "-[a-z]+", 'gi');
            var PARENT_CLASSS_COLOR = target.classList.value.match(REGEXP_CLASS_COLOR) || [];
            PARENT_CLASSS_COLOR.forEach(function (className) {
                _this._renderer.removeClass(target, className);
            });
        };
        MdbRippleDirective.prototype._colorToRGB = function (color) {
            // eslint-disable-next-line no-shadow,@typescript-eslint/no-shadow
            function hexToRgb(color) {
                var HEX_COLOR_LENGTH = 7;
                var IS_SHORT_HEX = color.length < HEX_COLOR_LENGTH;
                if (IS_SHORT_HEX) {
                    color = "#" + color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
                }
                return [
                    parseInt(color.substr(1, 2), 16),
                    parseInt(color.substr(3, 2), 16),
                    parseInt(color.substr(5, 2), 16),
                ];
            }
            // eslint-disable-next-line no-shadow,@typescript-eslint/no-shadow
            function namedColorsToRgba(color) {
                var tempElem = document.body.appendChild(document.createElement('fictum'));
                var flag = 'rgb(1, 2, 3)';
                tempElem.style.color = flag;
                if (tempElem.style.color !== flag) {
                    return DEFAULT_RIPPLE_COLOR;
                }
                tempElem.style.color = color;
                if (tempElem.style.color === flag || tempElem.style.color === '') {
                    return DEFAULT_RIPPLE_COLOR;
                } // color parse failed
                color = getComputedStyle(tempElem).color;
                document.body.removeChild(tempElem);
                return color;
            }
            // eslint-disable-next-line no-shadow, @typescript-eslint/no-shadow
            function rgbaToRgb(color) {
                color = color.match(/[.\d]+/g).map(function (a) { return +Number(a); });
                color.length = 3;
                return color;
            }
            if (color.toLowerCase() === 'transparent') {
                return DEFAULT_RIPPLE_COLOR;
            }
            if (color[0] === '#') {
                return hexToRgb(color);
            }
            if (color.indexOf('rgb') === -1) {
                color = namedColorsToRgba(color);
            }
            if (color.indexOf('rgb') === 0) {
                return rgbaToRgb(color);
            }
            return DEFAULT_RIPPLE_COLOR;
        };
        return MdbRippleDirective;
    }());
    MdbRippleDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbRipple]',
                    exportAs: 'mdbRipple',
                },] }
    ];
    MdbRippleDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    MdbRippleDirective.propDecorators = {
        rippleCentered: [{ type: core.Input }],
        rippleColor: [{ type: core.Input }],
        rippleDuration: [{ type: core.Input }],
        rippleRadius: [{ type: core.Input }],
        rippleUnbound: [{ type: core.Input }],
        ripple: [{ type: core.HostBinding, args: ['class.ripple-surface',] }],
        _createRipple: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var MdbRippleModule = /** @class */ (function () {
        function MdbRippleModule() {
        }
        return MdbRippleModule;
    }());
    MdbRippleModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [MdbRippleDirective],
                    imports: [],
                    exports: [MdbRippleDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MdbRippleDirective = MdbRippleDirective;
    exports.MdbRippleModule = MdbRippleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mdb-angular-ui-kit-ripple.umd.js.map
